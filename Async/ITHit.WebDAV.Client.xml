<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ITHit.WebDAV.Client</name>
    </assembly>
    <members>
        <member name="T:ITHit.WebDAV.Client.AutoVersion">
             <summary>
             Auto versioning modes.
             </summary>
             <remarks>
             <para>
             This enumeration determines how WebDAV server responds to an attempt to modify 
             checked-in items content or properties. Each item that support versioning can function in one of the following 
             auto-versioning modes:
             </para>
             <para>
             <b>NoAutoVersioning Mode.</b>
             In this mode item must be checked-out before modifications. Clients that does not support DeltaV will not be able to modify checked-in items.
             </para>
             <para>
             <b>CheckOutCheckIn Mode.</b>
             In this mode any WebDAV client applications will be able to modify checked-in items on server. Potentially many versions may be created. Workflow for versioning-unaware WebDAV client:
             <list type="number">
             <item><description>Lock request (optional).</description></item>
             <item><description>Modification request: 
             <list type="bullet">
             <item><description>Auto check-out performed.</description></item>
             <item><description>Modifications performed.</description></item>
             <item><description>Auto check-in performed.</description></item>
             </list>
             </description></item>
             <item><description>Unlock request (optional).</description></item>
             </list>
             </para>
             
             <para>
             <b>CheckOutUnlockedCheckIn Mode.</b>
             In this mode any WebDAV client applications will be able to modify checked-in items on server. If WebDAV client locks the item prior to update, the item will be checked in during unlock. This mode reduces the number of versions created by versioning unaware clients. The item is never left checked-out. This mode is recommended if you need to support both Class 1 and Class 2 WebDAV clients. Workflow for versioning-unaware WebDAV client:
             <list type="number">
             <item><description>Lock request (optional).</description></item>
             <item><description>Modification request: 
             <list type="bullet">
                 <item><description>Auto check-out performed.</description></item>
                 <item><description>Modifications performed.</description></item>
                 <item><description>Auto check-in performed if item not locked.</description></item>
             </list>
             </description></item>
             <item><description>Unlock request (optional).
             <list type="bullet">
                 <item><description>Check-in performed.</description></item>
                 <item><description>Unlock performed.</description></item>
             </list>
             </description></item>
             </list>
             </para>
            
             <para>
             <b>CheckOut Mode.</b>
             In this mode any WebDAV client applications will be able to modify checked-in items on server. If the item 
             was not locked before the update it will be left in checked-out state after modifications. Workflow for versioning-unaware WebDAV client:
             <list type="number">
             <item><description>Lock request (optional).</description></item>
             <item><description>Modification request: 
                 <list type="bullet">
                 <item><description>Auto check-out performed.</description></item>
                 <item><description>Modifications performed.</description></item>
                 </list>
             </description></item>
             <item><description>Unlock request (optional). 
                 <list type="bullet">
                 <item><description>Check-in performed.</description></item>
                 <item><description>Unlock performed.</description></item>
                 </list>
             </description></item>
             </list>
             </para>
             
             <para>
             <b>LockedCheckOut Mode.</b>
             Only WebDAV client applications that lock item before the update will be able to modify checked-in item. 
             This mode minimizes amount of versions created by versioning unaware clients. Class 1 WebDAV applications will 
             not be able to modify checked-in items. Workflow for versioning-unaware WebDAV client:
             <list type="number">
             <item><description>Lock request (required).</description></item>
             <item><description>Modification request: 
                 <list type="bullet">
                 <item><description>Auto check-out performed.</description></item>
                 <item><description>Modifications performed.</description></item>
                 </list>
             </description></item>
             <item><description>Unlock request (required). 
                 <list type="bullet">
                 <item><description>Check-in performed.</description></item>
                 <item><description>Unlock performed.</description></item>
                 </list>
             </description></item>
             </list>
             </para>
            </remarks>
        </member>
        <member name="F:ITHit.WebDAV.Client.AutoVersion.NoAutoVersioning">
            <summary>
            Auto versioning is not supported for checked-in items. Modification requests of versioning unaware clients will
            fail if item was not checked-out.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.AutoVersion.CheckOutCheckIn">
            <summary>
            Before any item update (such as changing content or properties) 
            by versioning unaware client WebDAV server will check-out item.
            After the item is updated it will be checked-in by server.
            <para>
            This potentially can create a lot of versions.
            </para>
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.AutoVersion.CheckOutUnlockedCheckIn">
            <summary>
            If client tries to update checked-in item, WebDAV server will automatically check-out item.
            If item is not locked server will check-in when update completes.
            <para>
            If item is locked, server will check-in item before the unlock or when lock expires.
            </para>
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.AutoVersion.CheckOut">
            <summary>
            If client tries to update checked-in item, WebDAV server will automatically check-out item.
            The item will be left in the check-out state after the update.
            <para>
            If item is locked, server will check-in item before the unlock or when lock expires.
            </para>
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.AutoVersion.LockedCheckOut">
            <summary>
            If client tries to update locked checked-in item, WebDAV server will automatically check-out item.
            <para>
            If item is locked, server will check-in item before the unlock or when lock expires.
            </para>
            <para>
            If item is not locked - update request will fail.
            </para>
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Change">
            <summary>
            Represents change types.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Change.Changed">
            <summary>
            Item was changed.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Change.Deleted">
            <summary>
             Item was deleted.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.ContentStream">
            <summary>
            Provides access to the file content stream and <see cref="P:ITHit.WebDAV.Client.ContentStream.ContentModified"/> value returned by server.
            </summary>
            <remarks>
            <para>
            In addition to properties and methods provided by <see cref="T:System.IO.Stream"/> class, 
            this class also provides the <see cref="P:ITHit.WebDAV.Client.ContentStream.ContentModified"/> property that indicates if content was modified 
            since time specified in <b>lastModifiedUtc</b> paremeter passed to <see cref="M:ITHit.WebDAV.Client.IItemContent.GetReadStreamAsync(System.Int64,System.Int64,System.DateTime)"/> method
            or <b>eTag</b> passed to <see cref="!:IItemContent.GetReadStreamAsync(long, long, string)"/> method.
            </para>
            <para>If file content was modified the <see cref="P:ITHit.WebDAV.Client.ContentStream.ContentModified"/> is <b>true</b> and this stream contains entire file content. 
            If content was not modified, the <see cref="P:ITHit.WebDAV.Client.ContentStream.ContentModified"/> is <b>false</b> and this stream contains file segment requested in 
            <see cref="M:ITHit.WebDAV.Client.IItemContent.GetReadStreamAsync(System.Int64,System.Int64,System.DateTime)"/> or <see cref="!:IItemContent.GetReadStreamAsync(long, long, string)"/> method call.</para>
            </remarks>
        </member>
        <member name="F:ITHit.WebDAV.Client.ContentStream.baseStream">
            <summary>
            Original stream.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.ContentStream.ContentModified">
            <summary>
            Indiacetes that file content was modified.
            </summary>
            <remarks>See class comments for more details about this property.</remarks>
            <value><b>true</b> if file content was modified since the requested date/time or eTag. <b>false</b> otherwise.</value>
        </member>
        <member name="P:ITHit.WebDAV.Client.ContentStream.CanRead">
            <summary>
             When overridden in a derived class, gets a value indicating whether the current
             stream supports reading.
            </summary>  
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:ITHit.WebDAV.Client.ContentStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current
            stream supports seeking.
            </summary>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:ITHit.WebDAV.Client.ContentStream.CanWrite">
            <summary>
             When overridden in a derived class, gets a value indicating whether the current
             stream supports writing.
            </summary>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:ITHit.WebDAV.Client.ContentStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="P:ITHit.WebDAV.Client.ContentStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.    
            </summary>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.ContentStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes
            any buffered data to be written to the underlying device.
            </summary>     
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.ContentStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current
            stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">
            An array of bytes. When this method returns, the buffer contains the specified
            byte array with the values between offset and (offset + count - 1) replaced by
            the bytes read from the current source.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin storing the data read
            from the current stream.
            </param>
            <param name="count">
            The maximum number of bytes to be read from the current stream.
            </param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number
            of bytes requested if that many bytes are not currently available, or zero (0)
            if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.ContentStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">
            A byte offset relative to the origin parameter.
            </param>
            <param name="origin">
            A value of type System.IO.SeekOrigin indicating the reference point used to obtain
            the new position.
            </param>
            <returns>The new position within the current stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from
            a pipe or console output.
            </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.ContentStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">
            The desired length of the current stream in bytes.
            </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support both writing and seeking, such as if the stream is
            constructed from a pipe or console output.
            </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.ContentStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current
            stream and advances the current position within this stream by the number of
            bytes written.
            </summary>   
            <param name="buffer">
            An array of bytes. This method copies count bytes from buffer to the current stream.
            </param>
            <param name="offset">
            The zero-based byte offset in buffer at which to begin copying bytes to the current stream. 
            </param>
            <param name="count">
            The number of bytes to be written to the current stream. 
            </param>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length.</exception>
            <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occured, such as the specified file cannot be found.</exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32) was called after the stream was closed.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.ContentStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file
                handles) associated with the current stream. Instead of calling this method,
               ensure that the stream is properly disposed.
            </summary>      
        </member>
        <member name="T:ITHit.WebDAV.Client.CredentialsWrapper">
            <summary>
            Wraps <see cref="T:System.Net.ICredentials"/> to not recreate HttpClient on credentials set/change.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Encoder">
            <summary>
            Provides functionality for encoding paths and urls.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Encoder.Encode(System.String)">
            <summary>
            Encodes path presented by string
            </summary>
            <param name="name">Path to encode</param>
            <returns>Encoded path</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.Encoder.Encode(System.Uri)">
            <summary>
            Encodes path presented by uri
            </summary>
            <param name="uri">Uri to encode</param>
            <returns>Encoded uri</returns>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.BadRequestException">
            <summary>
            The request could not be understood by the server due to malformed syntax.
            </summary>
            <remarks>
            Thrown when server responded with 400 (Bad Request) http response.
            The request could not be understood by the server due to malformed syntax.
            The client SHOULD NOT repeat the request without modifications.
            </remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.BadRequestException.#ctor(System.String,System.Uri,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.BadRequestException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.ConflictException">
            <summary>
            The request could not be carried because of conflict on server.
            </summary>
            <remarks>
            Thrown when server responded with 409 (Conflict) http response. The request could not
            be completed due to a conflict with the current state of the resource. This code is
            only allowed in situations where it is expected that the user might be able to resolve
            the conflict and resubmit the request. Conflicts are most likely to occur in response
            to a PUT request. For example, if versioning were being used and the entity being PUT
            included changes to a resource which conflict with those made by an earlier
            (third-party) request, the server might use the 409 response to indicate that it can't
            complete the request. In this case, the response entity would likely contain a list of
            the differences between the two versions in a format defined by the response Content-Type.
            </remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.ConflictException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.ConflictException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.DependencyFailedException">
            <summary>
            The method could not be performed on the resource because the requested action depended on another action and that action failed.
            </summary>
            <remarks>
            Thrown when server responded with 424 (Dependency Failed) http response. This status
            code means that the method could not be performed on the resource because the requested
            action depended on another action and that action failed. For example, if a command
            in a PROPPATCH method fails then, at minimum, the rest of the commands will also
            fail with 424 (Failed Dependency).
            </remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.DependencyFailedException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.DependencyFailedException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.FileContentModifiedException">
            <summary>
            Is thrown when resource content was requested from server having <c>If-Range</c> header
            but it's content was modified and the library can not tell about this situation another way
            other then exception throwing.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Exceptions.FileContentModifiedException.ResourceUri">
            <summary>
            Uri of the resource caused the current exception.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.FileContentModifiedException.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.FileContentModifiedException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="resourceUri">Uri of the resource caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">
            <summary>
            The server refused to fulfill the request.
            </summary>
            <remarks>
            Thrown when server responded with 403 (Forbidden) http response. The server understood
            the request, but is refusing to fulfill it. Authorization will not help and the request
            SHOULD NOT be repeated.
            </remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.ForbiddenException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.Info.Multistatus">
            <summary>
            Contains information about multistatus exception. Object of this class is passed to WebDavHttpExceptions.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.Info.MultistatusResponse">
            <summary>
            Contains information about multistatus responses. Objects of this class are passed to WebDavHttpExceptions.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.Info.PropertyMultistatus">
            <summary>
            Contains information about multistatus property exception. Object of this class is passed to WebDavHttpExceptions.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.Info.PropertyMultistatusResponse">
            <summary>
            Contains information about multistatus property responses. Objects of this class are passed to WebDavHttpExceptions.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException">
            <summary>
            Is thrown when a resource is either checked in while need to be checked out for an operation
            to succeed or vice versa.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException.ResourceUri">
            <summary>
            Uri of the resource caused the current exception.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException.#ctor(System.String,System.Uri,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="resourceUri">Uri of the resource caused the current exception.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="resourceUri">Uri of the resource caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.LockedException">
             <summary>
             The item is locked.
             </summary>
             <remarks>
             Thrown when server responded with 423 (Locked) http response. This status code means
             the source or destination resource of a method is locked.
             </remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IHierarchyItem item = await session.GetFileAsync(new Uri("https://server:8580/Products/Sales.txt"));
            
             LockInfo lockInfo = null;
             try
             {
                 lockInfo = await item.LockAsync(LockScope.Shared, false, "User 1", TimeSpan.MaxValue);
             }
             catch (LockedException)
             {
                 Console.Write("The item is locked.");
             }
             catch (MethodNotAllowedException)
             {
                 Console.Write("The item does not alow locks.");
             }
             if (lockInfo!= null)
             {
                 string timout = lockInfo.TimeOut == TimeSpan.MaxValue ? "Infinite" : lockInfo.TimeOut.TotalSeconds.ToString();
                 Console.WriteLine(lockInfo.Owner
                     + " " + lockInfo.LockToken.Href
                     + " " + lockInfo.LockToken.LockToken
                     + " " + lockInfo.LockScope
                     + " " + lockInfo.Deep
                     + " " + timout);
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.LockedException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.LockedException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException">
             <summary>
             The method is not allowed.
             </summary>
             <remarks>
             Thrown when server responded with 405 (Method Not Allowed) http response. The method
             specified in the Request-Line is not allowed for the resource identified by the Request-URI.
             </remarks>
             <example>
             <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            
            IFolder folder = await session.GetFolderAsync(new Uri("https://server:8080/"));
            IFolder newFolder = null;
            try
            {
                newFolder = await folder.CreateFolderAsync("My Folder");
            }
            catch(MethodNotAllowedException)
            {
                Console.WriteLine("Folder already exists.");
            }
            if (newFolder!=null)
                Console.WriteLine(newFolder.CreationDate.ToString());
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">
             <summary>
             The item doesn't exist on the server.
             </summary>
             <remarks>
             Thrown when server responded with 404 (Not Found) http response. The server has not
             found anything matching the Request-URI. No indication is given of whether the
             condition is temporary or permanent.
             </remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
            
             IFolder folder = null;
             try
             {
                 folder = await session.GetFolderAsync(new Uri("https://server:8080/Products"));
             }
             catch(UnauthorizedException)
             {
                 Console.WriteLine("Incorrect user name or password.");
             }
             catch(NotFoundException)
             {
                 Console.WriteLine("Folder not found.");
             }
            
             if(folder!=null)
             {
                 Console.WriteLine(folder.LastModified.ToString());
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.NotFoundException.#ctor(System.String,System.Uri,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.NotImplementedException">
            <summary>
            The method is not implemented.
            </summary>
            <remarks>
            Thrown when server responded with 501 (Not Implemented) http response. The server
            does not support the functionality required to fulfill the request. This is the
            appropriate response when the server does not recognize the request method and is not
            capable of supporting it for any resource.
            </remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.NotImplementedException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.NotImplementedException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.NotModifiedException">
            <summary>
            Thrown when server responded with 304 (Not Modified) http response.
            If the client has performed a conditional GET request and access is allowed, but
            the document has not been modified, the client library throws this exception.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.NotModifiedException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.NotModifiedException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response with error details.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.NotUnderVersionControlException">
            <summary>
            Is thrown when a resource should be placed under version control for an operation to succeed.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Exceptions.NotUnderVersionControlException.ResourceUri">
            <summary>
            Uri of the resource caused the current exception.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.NotUnderVersionControlException.#ctor(System.String,System.Uri,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.NotUnderVersionControlException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="resourceUri">Uri of the resource caused the current exception.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.NotUnderVersionControlException.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.NotUnderVersionControlException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="resourceUri">Uri of the resource caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.NotVersionableException">
            <summary>
            Is thrown when a resource can not be put under version control.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Exceptions.NotVersionableException.ResourceUri">
            <summary>
            Uri of the resource caused the current exception.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.NotVersionableException.#ctor(System.String,System.Uri,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.NotVersionableException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="resourceUri">Uri of the resource caused the current exception.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.NotVersionableException.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.NotVersionableException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="resourceUri">Uri of the resource caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.PreconditionFailedException">
            <summary>
            Precondition failed.
            </summary>
            <remarks>
            Thrown when server responded with 412 (Precondition Failed) http response. The
            precondition given in one or more of the request-header fields evaluated to false
            when it was tested on the server. This response code allows the client to place
            preconditions on the current resource metainformation (header field data) and thus
            prevent the requested method from being applied to a resource other than the one intended.
            </remarks>
            <example>
            <code>
            IFolder itemSrc = await session.GetFolderAsync(new Uri("https://server:8080/Library/"));
            IFolder itemDst = await session.GetFolderAsync(new Uri("https://server:8080/Sales/"));
            try
            {
                await itemSrc.MoveToAsync(itemDst, itemSrc.DisplayName, false);
            }
            catch (PreconditionFailedException)
            {
                Console.WriteLine("The destination item exists and 'overwrite' was 'false'.");
            }
            catch (WebDavHttpException ex)
            {
                Console.WriteLine(ex.Message + " " + ex.Status.Code + " " + ex.Status.Description);
                foreach (IMultistatusResponse resp in ex.Multistatus.Responses)
                { // Find which items failed to move.
                    Console.WriteLine(resp.Href + " " + resp.Status.Code + " " + resp.Status.Description);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.PreconditionFailedException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.PreconditionFailedException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response with error details.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.PropertyConflictException">
            <summary>
            Thrown when server responded with Property Conflict http response.
            </summary>
            <remarks>
            The client has provided a value whose semantics are not appropriate for the property.
            This includes trying to set read-only properties.
            </remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.PropertyConflictException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.PropertyName,ITHit.WebDAV.Client.IMultistatus,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.PropertyConflictException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="propertyName">Name of the property processing of which caused the exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.PropertyException">
             <summary>
             Is raised whenever property processing was unsuccessful.
             </summary>
             <remarks>
             This is base class for exceptions raised when working with properties.
             </remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd", "DOMAIN");
            
             IHierarchyItem item = await session.GetFileAsync(new Uri("https://server/Library/doc.txt"));
             PropertyName[] propNames = new PropertyName[2];
             propNames[0] = new PropertyName("ManagerApproved", "Sales");
             propNames[1] = new PropertyName("Branch", "Sales");
             Property[] properties = null;
            
             try
             {
                 properties = await item.GetPropertyValuesAsync(propNames);
             }
             catch(PropertyNotFoundException ex)
             {
                 Console.WriteLine(ex.Message + " " + ex.PropertyName);
             }
             if (properties != null)
             {
                 foreach (Property prop in properties)
                 {
                     Console.WriteLine(prop.Name.NamespaceUri + ":" + prop.Name.Name + " " + prop.StringValue);
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:ITHit.WebDAV.Client.Exceptions.PropertyException.PropertyName">
            <summary>
            Name of the property processing of which caused the exception.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.PropertyException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.PropertyName,ITHit.WebDAV.Client.IMultistatus,ITHit.WebDAV.Client.HttpStatus,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.PropertyException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="propertyName">Name of the property processing of which caused the exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="status">Status of response that caused error.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.PropertyForbiddenException">
            <summary>
            Thrown when server responded with Property forbidden http response.
            </summary>
            <remarks>
            The client, for reasons the server chooses not to specify, cannot alter one
            of the properties.
            </remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.PropertyForbiddenException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.PropertyName,ITHit.WebDAV.Client.IMultistatus,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.PropertyForbiddenException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="propertyName">Name of the property processing of which caused the exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.PropertyNotFoundException">
             <summary>
             Thrown when server responded with Property Not Found http response for some property.
             </summary>
             <remarks>
             A request to retrieve the value of a property which does not exist is an error.
             </remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd", "DOMAIN");
            
             IHierarchyItem item = await session.GetFileAsync(new Uri("https://server/Library/doc.txt"));
             PropertyName[] propNames = new PropertyName[2];
             propNames[0] = new PropertyName("ManagerApproved", "Sales");
             propNames[1] = new PropertyName("Branch", "Sales");
             Property[] properties = null;
            
             try
             {
                 properties = await item.GetPropertyValuesAsync(propNames);
             }
             catch(PropertyNotFoundException ex)
             {
                 Console.WriteLine(ex.Message + " " + ex.PropertyName);
             }
             if (properties != null)
             {
                 foreach (Property prop in properties)
                 {
                     Console.WriteLine(prop.Name.NamespaceUri + ":" + prop.Name.Name + " " + prop.StringValue);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.PropertyNotFoundException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.PropertyName,ITHit.WebDAV.Client.IMultistatus,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.PropertyNotFoundException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="propertyName">Name of the property processing of which caused the exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.Redirect302Exception">
            <summary>
            Indicates that the requested information is located at the URI specified in the Location header.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.Exceptions.Redirect302Exception.Location">
            <summary>
            302 redirect Location header.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.Redirect302Exception.#ctor(System.String,System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.Redirect302Exception"/> class with location header,
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="location">302 redirect Location header.</param>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.ResumeIncompleteException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.ResumeIncompleteException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.StreamClosedException">
            <summary>
            Occurs when operation is performed on a stream, for which Close has been already
            called.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.StreamClosedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes new instance.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Usually this will be <see cref="T:System.Net.WebException"/></param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.StreamClosedException.#ctor(System.String)">
            <summary>
            Initializes new instance.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">
             <summary>
             Incorrect credentials provided or insufficient permissions to access the requested item.
             </summary>
             <remarks>
             Thrown when server responded with 401 (Unauthorized) http response. The request
             requires user authentication. The client MAY repeat the request with a suitable
             Authorization header field. If the request already included Authorization credentials,
             then the 401 response indicates that authorization has been refused for those
             credentials. If the 401 response contains the same challenge as the prior response,
             and the user agent has already attempted authentication at least once, then the user
             SHOULD be presented the entity that was given in the response, since that entity
             might include relevant diagnostic information.
             </remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
            
             IFolder folder = null;
             try
             {
                 folder = await session.GetFolderAsync(new Uri("https://server:8080/Products"));
             }
             catch(UnauthorizedException)
             {
                 Console.WriteLine("Incorrect user name or password.");
             }
             catch(NotFoundException)
             {
                 Console.WriteLine("Folder not found.");
             }
            
             if(folder!=null)
             {
                 Console.WriteLine(folder.LastModified.ToString());
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.UnauthorizedException.#ctor(System.String,System.Uri,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.UnsupportedDeltaVResult">
            <summary>
            Is thrown when server returns result which this version of client can not handle.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.UnsupportedDeltaVResult.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.UnsupportedDeltaVResult"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.UnsupportedDeltaVResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.UnsupportedDeltaVResult"/> class with
            a specified error message, a reference to the inner exception that is the cause
            of this exception, href of the item and multistatus response caused the error.
            </summary>
            <param name="message">The error message string.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.WebDavException">
            <summary>
            Base exception for all exceptions thrown by WebDAV client library.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.WebDavException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException"/> class with
            a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.WebDavException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException"/> class with
            a specified error message and a reference to the inner exception that is
            the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<c>Nothing</c> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">
             <summary>
             Is thrown whenever and erroneous http response is received.
             </summary>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFolder folder = await session.GetFolderAsync(new Uri("https://server/Library"));
            
             try
             {
                 await folder.DeleteAsync();
             }
             catch(WebDavHttpException ex)
             { // Find which items failed to delete.
                 Console.WriteLine(ex.Status.Code + " " + ex.Status.Description + " " + ex.Message);
                 foreach(IMultistatusResponse resp in ex.Multistatus.Responses)
                 {
                     Console.WriteLine(resp.Href + " " + resp.Status.Code + " " + resp.Status.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:ITHit.WebDAV.Client.Exceptions.WebDavHttpException.Status">
            <summary>
            Http status with wich request failed.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Exceptions.WebDavHttpException.Multistatus">
            <summary>
            Contains <see cref="T:ITHit.WebDAV.Client.IMultistatus"/> with elements that had errors, if multistatus information
            was available in response.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Exceptions.WebDavHttpException.Uri">
            <summary>
            Uri for which request failed.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Exceptions.WebDavHttpException.HttpMethod">
            <summary>
            Http method for which request failed.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Exceptions.WebDavHttpException.#ctor(System.String,System.Uri,ITHit.WebDAV.Client.IMultistatus,ITHit.WebDAV.Client.HttpStatus,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException"/> class with
            a specified error message, a reference to the inner exception that is
            the cause of this exception, href of the item, multistatus response
            and status of the response caused the error.
            </summary>
            <param name="message">The error message string.</param>
            <param name="href">The href of an item caused the current exception.</param>
            <param name="multistatus">Multistatus response containing error information.</param>
            <param name="status">Status of response that caused error.</param>
            <param name="httpMethod">Http method for which request failed.</param>
            <param name="innerException">The <c>Exception</c> instance that caused the current exception.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.InvalidLicenseException">
            <summary>
            The license is invalid.
            </summary>
            <remarks>The license is invalid.</remarks>
        </member>
        <member name="T:ITHit.WebDAV.Client.Exceptions.NamespaceDoc">
            <summary>
            The ITHit.WebDAV.Client.Exceptions namespace provides classes that represent various WebDAV client library exceptions, erroneous server responses and HTTP errors.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Features">
            <summary>
             Represents WebDAV server item compliance.
            </summary>
             <remarks>
             This enumeration represents WebDAV server item compliance.
             </remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IHierarchyItem item = await session.GetFileAsync(new Uri("https://server:8580/Products/Sales.txt"));
             if ( ((await item.SupportedFeaturesAsync()) &amp; Features.Class2) != 0 )
                 Console.WriteLine("Class 2 item. This item supports locking.");
             else
                 Console.WriteLine("Class 1 item. This item does not support locking.");
             </code>
             </example>
        </member>
        <member name="F:ITHit.WebDAV.Client.Features.Class1">
            <summary>
            WebDAV Class 1 compliant item.
            </summary>
            <remarks>Class 1 items does not support locking.</remarks>
        </member>
        <member name="F:ITHit.WebDAV.Client.Features.Class2">
            <summary>
            WebDAV Class 2 compliant item.
            </summary>
            <remarks>Class 2 items support locking.</remarks>
        </member>
        <member name="F:ITHit.WebDAV.Client.Features.VersionControl">
            <summary>
            DeltaV version-control compliant item.
            </summary>
            <remarks>Version-control items support versioning and reporting.</remarks>
        </member>
        <member name="F:ITHit.WebDAV.Client.Features.CheckoutInPlace">
            <summary>
            Checkout-in-place item support check out, check in and uncheckout operations.
            </summary>
            <remarks>Checkout-in-place items support mechanism that allows to explicitly check-out and check-in a resource to create a new version.</remarks>
        </member>
        <member name="F:ITHit.WebDAV.Client.Features.VersionHistory">
            <summary>
            DeltaV Version History compliant item.
            </summary>
            <remarks>Version-history feature allows a client to remove a resource from version-control.</remarks>
        </member>
        <member name="F:ITHit.WebDAV.Client.Features.Update">
            <summary>
            DeltaV Update compliant item.
            </summary>
            <remarks>The update feature provides a mechanism for changing the state of a checked-in version-controlled resource to be that of another version from the version history of that resource.</remarks>
        </member>
        <member name="F:ITHit.WebDAV.Client.Features.ResumableUpload">
            <summary>
            Item supports resumable upload.
            </summary>
            <remarks>The item provides mechanism for resuming upload.</remarks>
        </member>
        <member name="F:ITHit.WebDAV.Client.Features.ResumableDownload">
            <summary>
            Item supports resumable download.
            </summary>
            <remarks>The item provides mechanism for resuming download.</remarks>
        </member>
        <member name="T:ITHit.WebDAV.Client.FilterStream">
            <summary>
            Logs request and response content.
            </summary>
            <exclude/>
        </member>
        <member name="T:ITHit.WebDAV.Client.HttpStatus">
            <summary>
            Structure that describes HTTP response's status.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.None">
            <summary>
            No status defined.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.BadRequest">
            <summary>
            The request could not be understood by the server.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.Unauthorized">
            <summary>
            The request requires user authentication.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.OK">
            <summary>
            The request has succeeded.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.Created">
            <summary>
            The request has been fulfilled and resulted in a new resource being created.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.NoContent">
            <summary>
            The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.PartialContent">
            <summary>
            The server has fulfilled the partial GET request for the resource.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.MultiStatus">
            <summary>
            This status code provides status for multiple independent operations.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.NotFound">
            <summary>
            The server has not found anything matching the Request-URI.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.MethodNotAllowed">
            <summary>
            The method specified in the Request-Line is not allowed for the resource identified by the Request-URI.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.PreconditionFailed">
            <summary>
            The precondition given in one or more of the request-header fields evaluated to <c>false</c> when it was tested on the server.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.Locked">
            <summary>
            The source or destination resource of a method is locked.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.DependencyFailed">
            <summary>
            The method could not be performed on the resource because the requested action depended on another action and that action failed.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.Forbidden">
            <summary>
            The server understood the request, but is refusing to fulfill it.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.Conflict">
            <summary>
            The request could not be completed due to a conflict with the current state of the resource.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.NotImplemented">
            <summary>
            The server does not support the functionality required to fulfill the request.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.BadGateway">
            <summary>
            The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.InsufficientStorage">
            <summary>
            The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.HttpStatus.Redirect302">
            <summary>
            302 Found redirect.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.HttpStatus.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.HttpStatus"/> structure with
            code and description specified.
            </summary>
            <param name="code">Code of the status</param>
            <param name="description">Description of the status.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.HttpStatus.Parse(System.String)">
            <summary>
            Parses <see cref="T:ITHit.WebDAV.Client.HttpStatus"/> structure from string containing status information.
            </summary>
            <param name="status">String containing status information.</param>
            <returns><see cref="T:ITHit.WebDAV.Client.HttpStatus"/> structure that describes current status.</returns>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.Code">
            <summary>
            Gets the code of the status.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.Description">
            <summary>
            Gets the description of the status.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.HttpStatus.Equals(ITHit.WebDAV.Client.HttpStatus)">
            <summary>
            Indicates whether the current <see cref="T:ITHit.WebDAV.Client.HttpStatus"/> structure is equal to
            another <see cref="T:ITHit.WebDAV.Client.HttpStatus"/> structure.
            </summary>
            <param name="httpStatus"><see cref="T:ITHit.WebDAV.Client.HttpStatus"/> structure to compare.</param>
            <returns><c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.HttpStatus.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if obj and this instance are the same type and represent the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.HttpStatus.op_Equality(ITHit.WebDAV.Client.HttpStatus,ITHit.WebDAV.Client.HttpStatus)">
            <summary>
            The equality operator (==).
            </summary>
            <param name="status1">First <see cref="T:ITHit.WebDAV.Client.HttpStatus"/> structure to compare.</param>
            <param name="status2">Second <see cref="T:ITHit.WebDAV.Client.HttpStatus"/> structure to compare.</param>
            <returns><c>true</c> if the values of its operands are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.HttpStatus.op_Inequality(ITHit.WebDAV.Client.HttpStatus,ITHit.WebDAV.Client.HttpStatus)">
            <summary>
            The inequality operator (!=).
            </summary>
            <param name="status1">First <see cref="T:ITHit.WebDAV.Client.HttpStatus"/> structure to compare.</param>
            <param name="status2">Second <see cref="T:ITHit.WebDAV.Client.HttpStatus"/> structure to compare.</param>
            <returns><c>false</c> if its operands are equal, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.HttpStatus.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.IsCreateOk">
            <summary>
            Returns true if status is successful for Create operation
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.IsDeleteOk">
            <summary>
            Returns true if status is successful for Delete operation
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.IsOk">
            <summary>
            Returns true if status is successful
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.IsCopyMoveOk">
            <summary>
            Returns true if status is successful for Copy or Move operation
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.IsGetOk">
            <summary>
            Returns true if status is successful for Get operation
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.IsPartialContent">
            <summary>
            Returns true if status is Partial Content for Get operation
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.IsPutOk">
            <summary>
            Returns true if status is successful for Put operation
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.IsUnlockOk">
            <summary>
            Returns true if status is successful for Unlock operation
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.IsHeadOk">
            <summary>
            Returns true if status is successful for Head operation
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.HttpStatus.IsUpdateOk">
            <summary>
            Returns true if status is successful for Proppatch operation
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.IChangedItem">
            <summary>
            Represents an item change.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IChangedItem.ChangeType">
            <summary>
            Type of change.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.IChanges">
            <summary>
            Represents list of changes.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IChanges.NewSyncToken">
            <summary>
            The synchronization token provided by the server.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IChanges.MoreResults">
            <summary>
            Indicates that results is truncated.
            </summary>
            <remarks>
             A server MAY limit the number of member URLs in a response, for example, 
             to limit the amount of work expended in processing a request, 
             or as the result of an explicit limit set by the client
            </remarks>
        </member>
        <member name="T:ITHit.WebDAV.Client.IFile">
            <summary>
            Represents a file on a WebDAV server.
            </summary>
            <example>
			In the following example a file is downloaded from a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile davFile = (await session.GetFileAsync("https://server:8080/Products/image.gif")).WebDavResponse;
using (Stream webStream = await davFile.GetReadStreamAsync())
{
    int bufSize = 1048576; // 1Mb
    byte[] buffer = new byte[bufSize];
    int bytesRead = 0;
    using (FileStream fileStream = File.OpenWrite(davFile.DisplayName))
    {
        while ((bytesRead = await webStream.ReadAsync(buffer, 0, bufSize)) > 0)
            await fileStream.WriteAsync(buffer, 0, bytesRead);
    }
}
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.CheckInAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Creates new version.
            </summary>
            <param name="lockToken">Lock token for this item.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException">
            The resource must be version controlled and in Checked out state.
            </exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnsupportedDeltaVResult">
            Server returned result that is not supported by this client (DAV:check-in-fork-forbidden, DAV:check-in-fork-is-tree, DAV:check-in-fork-is-discouraged.) 
            </exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This item is locked and invalid lock token was provided.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception>
            <example>
			The following example demonstrates how to lock item, check-out, update, check-in, unlock and set comment and author for a version.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
LockInfo lockInfo = (await file.LockAsync(LockScope.Exclusive, false, "John Walter", TimeSpan.MaxValue)).WebDavResponse;
await file.CheckOutAsync(lockInfo.LockToken.LockToken);
await file.UpdatePropertiesAsync(
    new Property[] {new Property(new PropertyName("amount", "server"), "2")}, null,
    lockInfo.LockToken.LockToken);
IVersion version = (await file.CheckInAsync(lockInfo.LockToken.LockToken)).WebDavResponse;
await file.UnlockAsync(lockInfo.LockToken.LockToken);
await version.SetCommentAndAuthorAsync("Fixed some bugs.", "John");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.CheckOutAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Allow modifications to the content and custom properties of this version-controlled file.
            </summary>
            <param name="lockToken">Lock token for this item.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException">
            The resource must be versionable and in checked in state.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnsupportedDeltaVResult">
            Server returned result that is not supported by this client(
            DAV:checkout-of-version-with-descendant-is-forbidden
            DAV:checkout-of-version-with-descendant-is-discouraged
            DAV:checkout-of-checked-out-version-is-forbidden
            DAV:checkout-of-checked-out-version-is-discouraged)
            </exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This item is locked and invalid lock token was provided.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception> 
            <remarks>
            To allow modifications on a version-controlled item it must be first checked-out. 
            If you would like to protect item from being modified by other users you will also lock the item.
            </remarks>
            <example>
			The following example demonstrates how to lock item, check-out, update, check-in, unlock and set comment and author for a version.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
LockInfo lockInfo = (await file.LockAsync(LockScope.Exclusive, false, "John Walter", TimeSpan.MaxValue)).WebDavResponse;
await file.CheckOutAsync(lockInfo.LockToken.LockToken);
await file.UpdatePropertiesAsync(
    new Property[] {new Property(new PropertyName("amount", "server"), "2")}, null,
    lockInfo.LockToken.LockToken);
IVersion version = (await file.CheckInAsync(lockInfo.LockToken.LockToken)).WebDavResponse;
await file.UnlockAsync(lockInfo.LockToken.LockToken);
await version.SetCommentAndAuthorAsync("Fixed some bugs.", "John");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.UnCheckOutAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Cancels the CHECKOUT and restore the pre-CHECKOUT state of the version-controlled resource.
            </summary>
            <param name="lockToken">Lock token for this item.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException">
            The resource must be under version control in checked out state.
            </exception>                
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This item is locked and invalid lock token was provided.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception> 
            <example>
			The following example demonstrates how to restore pre-checked-out state of the item.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
LockInfo lockInfo = (await file.LockAsync(LockScope.Exclusive, false, "John Walter", TimeSpan.MaxValue)).WebDavResponse;
await file.CheckOutAsync(lockInfo.LockToken.LockToken);
//Modify file content or properties here.
//....
await file.UnCheckOutAsync(lockInfo.LockToken.LockToken);
await file.UnlockAsync(lockInfo.LockToken.LockToken);
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.UpdateToVersionAsync(ITHit.WebDAV.Client.IVersion)">
            <summary>
            Updates content and dead properties of item to those identified by <paramref name="version" />.
            </summary>              
            <param name="version">Version to update to.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException">
            The resource must be under version control in checked in state.        
            </exception>                                
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">The resource is locked and no lock token was provided.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception> 
            <example>
			The following example demonstrates how to restore specific version of the item.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync("https://server/sales.docx")).WebDavResponse;
LockInfo lockInfo = (await file.LockAsync(LockScope.Exclusive, false, "John Walter", TimeSpan.MaxValue)).WebDavResponse;
IVersion version = (await session.OpenVersionAsync(new Uri("https://server/sales.docx?version=2"))).WebDavResponse;
await file.UpdateToVersionAsync(version, lockInfo.LockToken.LockToken);
await file.UnlockAsync(lockInfo.LockToken.LockToken);
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.UpdateToVersionAsync(ITHit.WebDAV.Client.IVersion,System.String)">
            <summary>
            Updates content and dead properties of item to those identified by <paramref name="version" />.
            </summary>        
            <param name="version">Version to update to.</param>
            <param name="lockToken">Lock token for this item.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.InvalidCheckOutCheckInStateException">
            The resource must be under version control in checked in state.        
            </exception>                                
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This item is locked and invalid lock token was provided.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception> 
            <example>
			The following example demonstrates how to restore specific version of the item.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync("https://server/sales.docx")).WebDavResponse;
LockInfo lockInfo = (await file.LockAsync(LockScope.Exclusive, false, "John Walter", TimeSpan.MaxValue)).WebDavResponse;
IVersion version = (await session.OpenVersionAsync(new Uri("https://server/sales.docx?version=2"))).WebDavResponse;
await file.UpdateToVersionAsync(version, lockInfo.LockToken.LockToken);
await file.UnlockAsync(lockInfo.LockToken.LockToken);
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.GetAutoVersionAsync">
            <summary>
            Determines how checked-in item responds to WebDAV client attempts to modify its content or properties.
            </summary>
            <value>One of <see cref="T:ITHit.WebDAV.Client.AutoVersion"/> enum values.</value>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.SetAutoVersionAsync(ITHit.WebDAV.Client.AutoVersion)">
            <summary>
            Sets how checked-in item responds to WebDAV client attempts to modify its content or properties.
            </summary>
            <param name="autoVersion">Auto-versioning mode.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyException">Attempt to set auto-versioning mode failed.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">The resource is locked and no lock token was provided.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.SetAutoVersionAsync(ITHit.WebDAV.Client.AutoVersion,System.String)">
            <summary>
            Sets how checked-in item responds to WebDAV client attempts to modify its content or properties.
            </summary>
            <param name="autoVersion">Auto-versioning mode.</param>
            <param name="lockToken">Lock token for this item.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyException">Attempt to set auto-versioning mode failed.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">The resource is locked and no lock token was provided.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception>
        </member>
        <member name="P:ITHit.WebDAV.Client.IFile.CheckedOut">
            <summary>Provides information whether item is in checked-in or checked-out state.</summary>
            <value>Boolean value indicating if item is in checked-out state.</value>
            <example>
			The following example demonstrates how to find out if item is in checked-out state.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
if (file.CheckedOut)
    MessageBox.Show("The item is checked-out.");
else
    MessageBox.Show("The item is checked-in.");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.IsCheckedOutAsync">
            <obsolete>Use <see cref="P:ITHit.WebDAV.Client.IFile.CheckedOut" /> property instead.</obsolete>
            <summary>Determines whether item is in checked-in or checked-out state.</summary>
            <returns>Boolean value indicating if item is in checked-out state.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotUnderVersionControlException">This resource is not version controlled.</exception>
            <example>
			The following example demonstrates how to find out if item is in checked-out state.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
if (await file.IsCheckedOutAsync())
    MessageBox.Show("The item is checked-out.");
else
    MessageBox.Show("The item is checked-in.");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.PutUnderVersionControlAsync(System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Enables / disables version control for this file.
            </summary>
            <param name="enable"><c>True</c> to enable version-control, <c>false</c> - to disable.</param>
            <param name="lockToken">Lock token for this item.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This item is locked and invalid lock token was provided.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotVersionableException">This resource doesn't support version-control method.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.GetVersionsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Retrieves list of all versions for this file.</summary>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Array of all version objects implementing <see cref="T:ITHit.WebDAV.Client.IVersion" /> for this file.</returns>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception>                                      
            <remarks>
            You can read version content and request properties as you usually do for files 
            but you cannot update content or properties.
            If no versions found for the file, an empty array will be returned.
            </remarks>
            <example>
			The following example demonstrates how to list file versions.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
IList<IVersion>> versions = (await file.GetVersionsAsync()).WebDavResponse;
foreach (IVersion version in versions)
{
    MessageBox.Show(version.VersionName);
}
				]]>
			</code>
		</example>
        </member>
        <member name="P:ITHit.WebDAV.Client.IFile.VersionControlled">
            <summary>Provides information whether item is under version control.</summary>
            <value>Boolean value indicating if item is being version-controlled.</value>
            <remarks>
            Returns <c>true</c> if item is under version control. Otherwise returns <c>false</c>.
            </remarks>
            <example>
			The following example demonstrates how to find out if item is being version-controlled.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
if(file.VersionControlled)
    MessageBox.Show("The item is being version controlled.");
else
    MessageBox.Show("The item is not under version control.");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.IsVersionControlledAsync">
            <obsolete>Use <see cref="P:ITHit.WebDAV.Client.IFile.VersionControlled" /> property instead.</obsolete>
            <summary>Determines whether item is under version control.</summary>
            <returns>Boolean value indicating if item is being version-controlled.</returns>
            <remarks>
            Returns <c>true</c> if item is under version control. Otherwise returns <c>false</c>.
            </remarks>
            <example>
			The following example demonstrates how to find out if item is being version-controlled.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
if(await file.IsVersionControlledAsync())
    MessageBox.Show("The item is being version controlled.");
else
    MessageBox.Show("The item is not under version control.");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFile.GetCurrentVersionAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>Current item version. Null, if item is not under version control.</summary>                
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception>                                      
        </member>
        <member name="T:ITHit.WebDAV.Client.IFolder">
            <summary>
            Represents a folder in a WebDAV repository.
            </summary>
            <example>
			The following example demonstrates how to upload a file from local file system to a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");
IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;

IFile file = (await folder.CreateFileAsync("products.xlsx")).WebDavResponse;
file.AllowWriteStreamBuffering = false;
file.TimeOut = 36000000; // 10 hours
await file.UploadAsync("C:\\products.xlsx");
				]]>
			</code>
		</example>
        </member>
        <member name="P:ITHit.WebDAV.Client.IFolder.AvailableBytes">
            <summary>
            Retrieves information about quota available bytes.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IFolder.UsedBytes">
            <summary>
            Retrieves information about quota used bytes.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFolder.GetChildrenAsync(System.Boolean,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Returns children of this folder.
            </summary>
            <param name="recursively">Indicates if all subtree of children should be returned.</param>
            <param name="names">Properties that will be retrieved for each item returned by this method.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <param name="headers">Request headers.</param>
            <returns>Array that include child folders and files.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This folder doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <remarks>Use this method if you would like to get known custom properties with each item returned by this method. For instance if you store item ID as a custom property you can retrieve the ID of each item with a single request to server.</remarks>
            <example>
			The following example demonstrates how to get custom properties for all child items with a single request to server.
			<code>
				<![CDATA[
string license = "&lt;?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

PropertyName[] propNames = new PropertyName[2];
propNames[0] = new PropertyName("MyID", "Sales");
propNames[1] = new PropertyName("Branch", "Sales");

IFolder folder = (await session.GetFolderAsync( new Uri("https://server:8080/"))).WebDavResponse;
IList<IHierarchyItem>> children = (await folder.GetChildrenAsync(false, propNames)).WebDavResponse;
foreach (IHierarchyItem item in children)
{
	Console.WriteLine(item.DisplayName);
	foreach(Property prop in item.Properties)
	{
		Console.WriteLine(prop.Name.NamespaceUri + ":" + prop.Name.Name + " " + prop.StringValue);
    }
}
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFolder.CreateFolderAsync(System.String,ITHit.WebDAV.Client.LockUriTokenPair[])">
             <summary>Creates new folder with specified name as child of this one.</summary>
             <param name="name">Name of the new folder.</param>
             <param name="lockTokens">Lock tokens for this folder.</param>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException">Item with specified name already exists.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">Creation of child items not allowed.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This folder doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This folder is locked and no or invalid lock token was specified.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd", "DOMAIN");
            
             Uri uri = new Uri("https://server:8880/");
             IFolder folder = await session.GetFolderAsync(uri).WebDavResponse;
             LockInfo lockInfo = await folder.LockAsync(LockScope.Exclusive, true, "User 1", new TimeSpan(0, 30, 0)).WebDavResponse;
             LockUriTokenPair[] tokenPair = new LockUriTokenPair[] { new LockUriTokenPair(uri, lockInfo.LockToken.LockToken) };
             await folder.CreateFolderAsync("My Folder", tokenPair);
             await folder.UnlockAsync(lockInfo.LockToken.LockToken);
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFolder.CreateFolderAsync(System.String)">
             <summary>Creates new folder with specified name as child of this one.</summary>
             <param name="name">Name of the new folder.</param>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException">Item with specified name already exists.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">Creation of child items not allowed.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This folder doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This folder is locked and no or invalid lock token was specified.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
             <example>
             <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            
            IFolder folder = await session.GetFolderAsync(new Uri("https://server:8080/")).WebDavResponse;
            IFolder newFolder = null;
            try
            {
                newFolder = await folder.CreateFolderAsync("My Folder").WebDavResponse;
            }
            catch(MethodNotAllowedException)
            {
                Console.WriteLine("Folder already exists.");
            }
            if (newFolder!=null)
                Console.WriteLine(newFolder.CreationDate.ToString());
             </code>
             </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ITHit.WebDAV.Client.IFolder.CreateFileAsync(System.String,ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" -->
        <member name="M:ITHit.WebDAV.Client.IFolder.CreateFileAsync(System.String)">
            <summary>Creates a file with a specified name.</summary>
            <remarks>If a file with specified name exists its content is truncated.</remarks>
            <param name="name">Name of the new file.</param>
            <returns>Newly created file.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">Creation of child items not allowed.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This folder doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This folder is locked and no or invalid lock token was specified.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <example>
			The following example demonstrates how to upload a file from local file system to a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");
IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;

IFile file = (await folder.CreateFileAsync("products.xlsx")).WebDavResponse;
file.AllowWriteStreamBuffering = false;
file.TimeOut = 36000000; // 10 hours
await file.UploadAsync("C:\\products.xlsx");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFolder.CreateLockNullAsync(System.String,ITHit.WebDAV.Client.LockScope,System.Boolean,System.String,System.TimeSpan,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Locks name for later use.
            </summary>
            <param name="newItemName">Name of new item.</param>
            <param name="lockScope">Scope of the lock.</param>
            <param name="deep">Whether to lock entire subtree.</param>
            <param name="owner">Owner of the lock.</param>
            <param name="timeout">TimeOut after which lock expires.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Instance of <see cref="T:ITHit.WebDAV.Client.LockInfo"/> with information about created lock.</returns>
            <remarks>Locks name for later use creating a lock-null item with a specified name. Later lock-null item could be converted 
            to a resource calling <see cref="M:ITHit.WebDAV.Client.IFolder.CreateFileAsync(System.String)"/> or converted to a folder calling <see cref="M:ITHit.WebDAV.Client.IFolder.CreateFolderAsync(System.String)"/>. 
            Lock-null items cannot be deleted using <see cref="!:IHierarchyItem.DeleteAsync()"/> method, call <see cref="!:IHierarchyItem.UnlockAsync(string)"/> instead.
            </remarks>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This folder doesn't exist on the server.(Server in fact returns Conflict)</exception>           
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This folder is locked and no or invalid lock token was specified.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The client, for reasons the server chooses not to specify, cannot apply the lock.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <example>
            <code>
            IFolder folder = await session.GetFolderAsync(new Uri("https://server:8080/Sales")).WebDavResponse as IFolder;
            LockInfo lockInfo = await folder.CreateLockNullAsync("file1.gif",
                LockScope.Exclusive, true, "User 1", new TimeSpan(0, 30, 0)); // reserve name for future use
            Uri RemoteStorageUri = new Uri("https://server:8080/Sales/file1.gif");
            LockUriTokenPair[] lockTokens = new LockUriTokenPair[] { new LockUriTokenPair(RemoteStorageUri, lockInfo.LockToken.LockToken) };
            IFile file = await folder.CreateFileAsync("file1.gif", lockTokens).WebDavResponse; // convert lock-null to resource
            await file.UnlockAsync(lockTokens);
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFolder.CreateLockNullAsync(System.String,System.TimeSpan,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Locks name for later use.
            </summary>
            <param name="newItemName">Name of new item.</param>
            <param name="deep">Whether to lock entire subtree.</param>
            <param name="lockToken">Lock token for the lock.</param>
            <param name="timeout">TimeOut after which lock expires.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Instance of <see cref="T:ITHit.WebDAV.Client.LockInfo"/> with information about created lock.</returns>
            <remarks>Locks name for later use creating a lock-null item with a specified name. Later lock-null item could be converted 
            to a file calling <see cref="M:ITHit.WebDAV.Client.IFolder.CreateFileAsync(System.String)"/> or converted to a folder calling <see cref="M:ITHit.WebDAV.Client.IFolder.CreateFolderAsync(System.String)"/>. 
            Lock-null items cannot be deleted using <see cref="!:IHierarchyItem.DeleteAsync()"/> method, call <see cref="!:IHierarchyItem.UnlockAsync(string)"/> instead.</remarks>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException">Item with specified name already exists.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This folder doesn't exist on the server.(Server in fact returns Conflict)</exception>           
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This folder is locked and no or invalid lock token was specified.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The client, for reasons the server chooses not to specify, cannot apply the lock.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            IFolder folder = await session.GetFolderAsync(new Uri("https://server:8080/Sales")).WebDavResponse;
            LockInfo lockInfo = await folder.CreateLockNullAsync("file1.gif",
                TimeSpan.FromMinutes(5), "locktoken", false).WebDavResponse; // reserve name for future use
            Uri RemoteStorageUri = new Uri("https://server:8080/Sales/file1.gif");
            LockUriTokenPair[] lockTokens = new LockUriTokenPair[] { new LockUriTokenPair(RemoteStorageUri, lockInfo.LockToken.LockToken) };
            IFile file = await folder.CreateFileAsync("file1.gif", lockTokens).WebDavResponse; // convert lock-null to resource
            await file.UnlockAsync(lockTokens);
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFolder.ItemExistsAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Checks whether specified item exists in the folder.
            </summary>
            <param name="name">Item's name</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>True, if specified item exists; false, otherwise.</returns>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            IFolder srcFolder = await session.GetFolderAsync(new Uri("https://server:8080/Library/")).WebDavResponse;
            bool isItemExists = await srcFolder.ItemExistsAsync("image.gif").WebDavResponse;
            if(isItemExists)
                Console.WriteLine("Item exists");
            else
                Console.WriteLine("Item not found");
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFolder.GetFileAsync(System.String)">
            <summary>
            Gets the specified file from server.
            </summary>
            <param name="name">Name of the file.</param>
            <returns>File corresponding to requested name.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            IFolder folder = await session.GetFolderAsync(new Uri("https://server:8080/Sales")).WebDavResponse;
            IFile file = await folder.GetFileAsync("total.doc").WebDavResponse;
            Console.WriteLine(file.LastModified);
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFolder.GetFolderAsync(System.String)">
            <summary>
            Gets the specified folder from server.
            </summary>
            <param name="name">Name of the folder.</param>
            <returns>Folder corresponding to requested path.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested folder doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            IFolder folder = await session.GetFolderAsync(new Uri("https://server:8080/Sales")).WebDavResponse;
            IFolder folderEurope = await folder.GetFolderAsync("Europe").WebDavResponse;
            Console.WriteLine(folderEurope.LastModified);
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IFolder.GetItemAsync(System.String)">
             <summary>
             Returns <see cref="T:ITHit.WebDAV.Client.IHierarchyItem"/> corresponding to <paramref name="name"/>.
             </summary>
             <param name="name">Path to the item.</param>
             <returns>Item corresponding to requested path.</returns>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested folder doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
            
             IFile file = null;
             
             try
             {
                 IFolder folder = await session.GetFolderAsync(new Uri("https://server/Products/")).WebDavResponse;
                 file = await folder.GetItemAsync("cars.xml").WebDavResponse as IFile;
             }
             catch(UnauthorizedException)
             {
                 Console.WriteLine("Incorrect user name or password.");
             }
             catch(NotFoundException)
             {
                 Console.WriteLine("Item was not found.");
             }
            
             if (file != null)
             {
                 Console.WriteLine(file.LastModified.ToString());
             }
             </code>
             </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ITHit.WebDAV.Client.IFolder.SearchByQueryAsync(ITHit.WebDAV.Client.SearchQuery,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" -->
        <member name="T:ITHit.WebDAV.Client.IHierarchyItem">
             <summary>
             Represents one WebDAV item (file, folder, version or lock-null).
             </summary>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFolder srcFolder = (await session.GetFolderAsync(new Uri("https://server:8080/Library/Sales"))).WebDavResponse;
             IFolder dstFolder = (await session.GetFolderAsync(new Uri("https://server:8080/Library/"))).WebDavResponse;
            
             try
             {
                 await srcFolder.CopyToAsync(dstFolder, "Test1", true, false);
             }
             catch (PreconditionFailedException)
             {
                 Console.WriteLine("The destination item exists and 'overwrite' was 'false'.");
             }
             catch (WebDavHttpException ex)
             {
                 Console.WriteLine(ex.Message + " " + ex.Status.Code + " " + ex.Status.Description);
                 foreach (IMultistatusResponse resp in ex.Multistatus.Responses)
                 { // Find which items failed to move.
                     Console.WriteLine(resp.Href + " " + resp.Status.Code + " " + resp.Status.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:ITHit.WebDAV.Client.IHierarchyItem.Href">
            <summary>
            This item path on the server.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IHierarchyItem.CreationDate">
            <summary>
            The date item was created.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IHierarchyItem.LastModified">
            <summary>
            Most recent modification date.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IHierarchyItem.DisplayName">
            <summary>User friendly item name.</summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IHierarchyItem.ItemType">
            <summary>
            Type of the item (File, Folder, Version or VersionHistory)
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IHierarchyItem.SupportedLock">
            <summary>Lock types supported by the item.</summary>
            <value>Array of supported lock types.</value>
            <remarks>Empty array is returned if item does not support any locks.</remarks>
        </member>
        <member name="P:ITHit.WebDAV.Client.IHierarchyItem.ActiveLocks">
            <summary>Array of item's lock descriptions.</summary>
            <value>Array of <see cref="T:ITHit.WebDAV.Client.LockInfo"/> objects representing locks.</value>
            <remarks>
            If item has no locks, an empty array is returned.
            </remarks>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            IHierarchyItem item = (await session.GetFileAsync(new Uri("https://server:8080/Products/Sales.txt"))).WebDavResponse;
            foreach(LockInfo lockInfo in item.ActiveLocks)
            {
                string timout = lockInfo.TimeOut == TimeSpan.MaxValue ? "Infinite" : lockInfo.TimeOut.TotalSeconds.ToString();
                Console.WriteLine(lockInfo.Owner 
                    + " " + lockInfo.LockToken.Href 
                    + " " + lockInfo.LockToken.LockToken 
                    + " " + lockInfo.LockScope 
                    + " " + lockInfo.Deep
                    + " " + timout);
            }
            </code>
            </example>        
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.GetActiveLocksAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <obsolete>Use <see cref="P:ITHit.WebDAV.Client.IHierarchyItem.ActiveLocks"/> property instead.</obsolete>
            <summary>
            Retrieves lock information about this item.
            </summary>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Array of <see cref="T:ITHit.WebDAV.Client.LockInfo"/> objects representing locks.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyForbiddenException">User has not enough rights to obtain one of requested properties.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyConflictException">
            The client has provided a value whose semantics are not
            appropriate for the property. This includes trying to set read-only properties.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <remarks>Empty array is returned if item was not locked.</remarks>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            IHierarchyItem item = (await session.GetFileAsync(new Uri("https://server:8080/Products/Sales.txt"))).WebDavResponse;
            LockInfo[] activeLocks = await item.GetActiveLocksAsync();
            foreach(LockInfo lockInfo in activeLocks)
            {
                string timout = lockInfo.TimeOut == TimeSpan.MaxValue ? "Infinite" : lockInfo.TimeOut.TotalSeconds.ToString();
                Console.WriteLine(lockInfo.Owner 
                    + " " + lockInfo.LockToken.Href 
                    + " " + lockInfo.LockToken.LockToken 
                    + " " + lockInfo.LockScope 
                    + " " + lockInfo.Deep
                    + " " + timout);
            }
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.GetSourceAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Retrieves media type independent links.
            </summary>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Media type independent links.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyForbiddenException">User has not enough rights to obtain one of requested properties.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyConflictException">
            The client has provided a value whose semantics are not
            appropriate for the property. This includes trying to set read-only properties.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <remarks>Empty array is returned if no links found or property is not supported.</remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.GetSupportedLockAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <obsolete>Use <see cref="P:ITHit.WebDAV.Client.IHierarchyItem.SupportedLock"/> property instead.</obsolete>
            <summary>Retrieves information about supported locks.</summary>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Array of supported lock types.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyForbiddenException">User has not enough rights to obtain one of requested properties.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyConflictException">
            The client has provided a value whose semantics are not
            appropriate for the property. This includes trying to set read-only properties.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpectred error occurred.</exception>      
            <remarks>Empty array is returned if item does not support any locks.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ITHit.WebDAV.Client.IHierarchyItem.GetParentAsync" -->
        <!-- Badly formed XML comment ignored for member "M:ITHit.WebDAV.Client.IHierarchyItem.GetPropertyValuesAsync(ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" -->
        <!-- Badly formed XML comment ignored for member "M:ITHit.WebDAV.Client.IHierarchyItem.GetAllPropertiesAsync" -->
        <!-- Badly formed XML comment ignored for member "M:ITHit.WebDAV.Client.IHierarchyItem.GetPropertyNamesAsync" -->
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.UpdatePropertiesAsync(ITHit.WebDAV.Client.Property[],ITHit.WebDAV.Client.PropertyName[],System.String)">
             <summary>
             Updates values of properties exposed by this item.
             </summary>
             <param name="propertiesToAddOrUpdate">Properties to be updated.</param>
             <param name="propertiesToDelete">Names of properties to be removed from this item.</param>
             <param name="lockToken">Lock token.</param>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">The item is locked and no or invalid lock token was provided.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyForbiddenException">Cannot alter one of the properties.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyConflictException">
             The client has provided a value whose semantics are not
             appropriate for the property. This includes trying to set read-only properties.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ConflictException">
             The resource is version controlled and has to be checked out to be edited.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyException">Server returned unknown error for specific property.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd", "DOMAIN");
            
             IFile file = (await session.GetFileAsync(new Uri("https://server/Library/doc.txt"))).WebDavResponse;
            
             Property[] propsToAddAndUpdate = new Property[3];
             propsToAddAndUpdate[0] = new Property(new PropertyName("Ammount", "CorpNS"), "1200");
             propsToAddAndUpdate[1] = new Property(new PropertyName("ManagerApproved", "Sales"), "Yes");
             propsToAddAndUpdate[2] = new Property(new PropertyName("Branch", "Sales"), "EMEA Region");
            
             PropertyName[] propsToDelete = new PropertyName[2];
             propsToDelete[0] = new PropertyName("InternalName", "Sales");
             propsToDelete[1] = new PropertyName("Counter", "CorpNS");
            
             LockInfo lockInfo = (await file.LockAsync(LockScope.Exclusive, true, "User 1", new TimeSpan(0, 30, 0))).WebDavResponse;
             try
             {
                 await file.UpdatePropertiesAsync(propsToAddAndUpdate, propsToDelete, lockInfo.LockToken.LockToken);
             }
             catch (PropertyException ex)
             {
                 Console.WriteLine(ex.Message + " " + ex.Status.Code + " " + ex.Status.Description);
                 // Find which properties failed to add/update/delete
                 foreach (IPropertyMultistatusResponse propInfo in ex.Multistatus.Responses)
                 {
                     Console.WriteLine(propInfo.PropertyName + " " + propInfo.Status.Code + " " + propInfo.Status.Description);
                 }
             }
             await file.UnlockAsync(lockInfo.LockToken.LockToken);
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.UpdatePropertiesAsync(ITHit.WebDAV.Client.Property[],ITHit.WebDAV.Client.PropertyName[])">
             <summary>
             Updates values of properties exposed by this item.
             </summary>
             <param name="propertiesToAddOrUpdate">Properties to be updated.</param>
             <param name="propertiesToDelete">Names of properties to be removed from this item.</param>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">The item is locked and no or invalid lock token was provided.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyForbiddenException">Cannot alter one of the properties.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyConflictException">
             The client has provided a value whose semantics are not
             appropriate for the property. This includes trying to set read-only properties.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ConflictException">
             The resource is version controlled and has to be checked out to be edited.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.PropertyException">Server returned unknown error for specific property.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFile file = (await session.GetFileAsync(new Uri("https://server/Library/doc.txt"))).WebDavResponse;
            
             Property[] propsToAddAndUpdate = new Property[3];
             propsToAddAndUpdate[0] = new Property(new PropertyName("Ammount", "CorpNS"), "1200");
             propsToAddAndUpdate[1] = new Property(new PropertyName("ManagerApproved", "Sales"), "Yes");
             propsToAddAndUpdate[2] = new Property(new PropertyName("Branch", "Sales"), "EMEA Region");
            
             PropertyName[] propsToDelete = new PropertyName[2];
             propsToDelete[0] = new PropertyName("InternalName", "Sales");
             propsToDelete[1] = new PropertyName("Counter", "CorpNS");
            
             try
             {
                 await file.UpdatePropertiesAsync(propsToAddAndUpdate, propsToDelete);
             }
             catch(PropertyException ex)
             {
                 Console.WriteLine(ex.Message + " " + ex.Status.Code + " " + ex.Status.Description);
                 // Find which properties failed to add/update/delete
                 foreach (IPropertyMultistatusResponse propInfo in ex.Multistatus.Responses)
                 {
                     Console.WriteLine(propInfo.PropertyName + " " + propInfo.Status.Code + " " + propInfo.Status.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.DeleteAsync(ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Deletes this item.
             </summary>
             <param name="lockTokens">Lock tokens for this item or any locked child item.</param>
             <param name="headers">Request headers.</param>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This folder or any child item is locked and no or invalid lock token was specified.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">User has not enough rights to perform this operation.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException">Trying to delete lock-null item. Lock-null items must be deleted using <see cref="!:IHierarchyItem.UnlockAsync(string)"/> method.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             IHierarchyItem item = (await session.GetFolderAsync(new Uri("http://vova:8580/Sales/"))).WebDavResponse;
             LockInfo lockInfo1 = (await item.LockAsync(LockScope.Shared, true, "User 1", new TimeSpan(6, 0, 0))).WebDavResponse;
            
             IHierarchyItem file = (await session.GetFileAsync(new Uri("http://vova:8580/Sales/Austria/report.docx"))).WebDavResponse;
             LockInfo lockInfo2 = (await file.LockAsync(LockScope.Shared, true, "User 1", new TimeSpan(6, 0, 0))).WebDavResponse;
            
             LockUriTokenPair[] locks = new LockUriTokenPair[2];
             locks[0] = lockInfo1.LockToken;
             locks[1] = lockInfo2.LockToken;
            
             try
             {
                 await item.DeleteAsync(locks);
             }
             catch (WebDavHttpException ex)
             {
                 Console.WriteLine(ex.Message + " " + ex.Status.Code + " " + ex.Status.Description);
                 foreach (IMultistatusResponse resp in ex.Multistatus.Responses)
                 { // Find which items failed to delete.
                     Console.WriteLine(resp.Href + " " + resp.Status.Code + " " + resp.Status.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.DeleteAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Deletes this item.
            </summary>
            <param name="lockToken">Lock token for this item.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This folder or any child item is locked and no or invalid lock token was specified.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">User has not enough rights to perform this operation.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException">Trying to delete lock-null item. Lock-null items must be deleted using <see cref="!:IHierarchyItem.UnlockAsync(string)"/> method.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.DeleteAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Deletes this item.
             </summary>
             <param name="headers">Request headers.</param>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This folder or any child item is locked and no or invalid lock token was specified.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">User has not enough rights to perform this operation.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException">Trying to delete lock-null item. Lock-null items must be deleted using <see cref="!:IHierarchyItem.UnlockAsync(string)"/> method.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFolder folder = (await session.GetFolderAsync(new Uri("https://server/Library"))).WebDavResponse;
            
             try
             {
                await folder.DeleteAsync();
             }
             catch(WebDavHttpException ex)
             { // Find which items failed to delete.
                 Console.WriteLine(ex.Status.Code + " " + ex.Status.Description + " " + ex.Message);
                 foreach(IMultistatusResponse resp in ex.Multistatus.Responses)
                 {
                     Console.WriteLine(resp.Href + " " + resp.Status.Code + " " + resp.Status.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.CopyToAsync(ITHit.WebDAV.Client.IFolder,System.String,System.Boolean,System.Boolean,ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Copies this item to destination folder.
             </summary>        
             <param name="destinationFolder">Folder to copy to.</param>
             <param name="destinationName">Name to assign to copied item.</param>
             <param name="deep">Indicates whether children of this item should be copied.</param>
             <param name="overwrite">Whether existing destination item shall be overwritten.</param>
             <param name="lockTokens">Lock tokens for destination folder or items to be overwritten if
             <paramref name="overwrite"/> is true.
             </param>   
             <param name="headers">Request headers.</param>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">
             The source and destination URIs are the same.
             </exception>         
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">
             The destination folder or items to be overwritten were locked.
             </exception>        
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.PreconditionFailedException">
             The destination item exists and <paramref name="overwrite"/> was false.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>        
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error for specific resource.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception> 
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IHierarchyItem file1 = (await session.GetFileAsync(new Uri("https://server:8080/Library/image007.gif"))).WebDavResponse;
             LockInfo lockInfo1 = (await file1.LockAsync(LockScope.Exclusive, false, "User 1", new TimeSpan(0, 5, 0))).WebDavResponse;
             IHierarchyItem file2 = (await session.GetFileAsync(new Uri("https://server:8080/Library/image004.gif"))).WebDavResponse;
             LockInfo lockInfo2 = (await file2.LockAsync(LockScope.Exclusive, false, "User 1", new TimeSpan(0, 5, 0))).WebDavResponse;
            
             LockUriTokenPair[] locks = new LockUriTokenPair[2];
             locks[0] = lockInfo1.LockToken;
             locks[1] = lockInfo2.LockToken;
            
             IFolder itemSrc = (await session.GetFolderAsync(new Uri("https://server:8080/Sales/Library/"))).WebDavResponse;
             IFolder itemDst = (await session.GetFolderAsync(new Uri("https://server:8080/Library/"))).WebDavResponse;
            
             try
             {
                await itemSrc.CopyToAsync(itemDst, itemSrc.DisplayName, true, true, locks);
             }
             catch (WebDavHttpException ex)
             {
                 Console.WriteLine(ex.Message + " " + ex.Status.Code + " " + ex.Status.Description);
                 foreach (IMultistatusResponse resp in ex.Multistatus.Responses)
                 { // Find which items failed to copy.
                     Console.WriteLine(resp.Href + " " + resp.Status.Code + " " + resp.Status.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.MoveToAsync(ITHit.WebDAV.Client.IFolder,System.String,System.Boolean,ITHit.WebDAV.Client.LockUriTokenPair[])">
             <summary>
             Moves this item to another location.
             </summary>
             <param name="destinationFolder">Folder to move to.</param>
             <param name="destinationName">Name to assign to moved item.</param>
             <param name="overwrite">Whether existing destination item shall be overwritten.</param>
             <param name="lockTokens">Lock tokens for resources to be moved, for destination folder or resources to be overwritten that are locked.</param>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">
             The source and destination URIs are the same.
             </exception> 
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ConflictException">
             A resource cannot be created at the destination until one or more
             intermediate collections have been created.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.PreconditionFailedException">
             The destination resource exists and <paramref name="overwrite"/> was false.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">
             The destination folder or items to be overwritten or source items were locked.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error for specific resource.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFolder itemSrc = (await session.GetFolderAsync(new Uri("https://server:8080/Library/"))).WebDavResponse;
             IFolder itemDst = (await session.GetFolderAsync(new Uri("https://server:8080/Sales/"))).WebDavResponse;
             LockInfo lockInfo1 = (await itemDst.LockAsync(LockScope.Shared, true, "User 1", new TimeSpan(0, 5, 0))).WebDavResponse;
            
             IHierarchyItem file = (await session.GetFileAsync(new Uri("https://server:8080/Library/image007.gif"))).WebDavResponse;
             LockInfo lockInfo2 = (await file.LockAsync(LockScope.Exclusive, false, "User 1", new TimeSpan(0, 5, 0))).WebDavResponse;
            
             LockUriTokenPair[] locks = new LockUriTokenPair[2];
             locks[0] = lockInfo1.LockToken;
             locks[1] = lockInfo2.LockToken;
            
             try
             {
                 await itemSrc.MoveToAsync(itemDst, itemSrc.DisplayName, true, locks);
             }
             catch (WebDavHttpException ex)
             {
                 Console.WriteLine(ex.Message + " " + ex.Status.Code + " " + ex.Status.Description);
                 foreach (IMultistatusResponse resp in ex.Multistatus.Responses)
                 { // Find which items failed to move.
                     Console.WriteLine(resp.Href + " " + resp.Status.Code + " " + resp.Status.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.MoveToAsync(ITHit.WebDAV.Client.IFolder,System.String,System.Boolean)">
            <summary>
            Moves this item to another location.
            </summary>
            <param name="destinationFolder">Folder to move to.</param>
            <param name="destinationName">Name to assign to moved item.</param>
            <param name="overwrite">Whether existing destination item shall be overwritten.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">
            The source and destination URIs are the same.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ConflictException">
            A resource cannot be created at the destination until one or more
            intermediate collections have been created.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PreconditionFailedException">
            The destination resource exists and <paramref name="overwrite"/> was false.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">
            The destination folder or items to be overwritten were locked or source items were locked.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error for specific resource.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <example>
            <code>
            IFolder itemSrc = (await session.GetFolderAsync(new Uri("https://server:8080/Library/"))).WebDavResponse;
            IFolder itemDst = (await session.GetFolderAsync(new Uri("https://server:8080/Sales/"))).WebDavResponse;
            try
            {
                await itemSrc.MoveToAsync(itemDst, itemSrc.DisplayName, false);
            }
            catch (PreconditionFailedException)
            {
                Console.WriteLine("The destination item exists and 'overwrite' was 'false'.");
            }
            catch (WebDavHttpException ex)
            {
                Console.WriteLine(ex.Message + " " + ex.Status.Code + " " + ex.Status.Description);
                foreach (IMultistatusResponse resp in ex.Multistatus.Responses)
                { // Find which items failed to move.
                    Console.WriteLine(resp.Href + " " + resp.Status.Code + " " + resp.Status.Description);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.LockAsync(ITHit.WebDAV.Client.LockScope,System.Boolean,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Locks the item.
             </summary>
             <param name="lockScope">Scope of the lock.</param>
             <param name="deep">Whether to lock entire subtree.</param>
             <param name="owner">Owner of the lock.</param>
             <param name="timeout">TimeOut after which lock expires. Set to TimeSpan.MaxValue for infinity.</param>
             <param name="headers">Request headers.</param>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <returns>Instance of <see cref="T:ITHit.WebDAV.Client.LockInfo"/> with information about created lock.</returns>
             <remarks>Server can set lock with different timeout than the one was asked.</remarks>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.PreconditionFailedException">
             The included lock token was not enforceable on this resource
             or the server could not satisfy the request in the lockinfo XML element.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">The resource is locked. The method has been rejected.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException">The item does not support locking.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The item doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IHierarchyItem item = (await session.GetFileAsync(new Uri("https://server:8580/Products/Sales.txt"))).WebDavResponse;
            
             LockInfo lockInfo = null;
             try
             {
                 lockInfo = (await item.LockAsync(LockScope.Shared, false, "User 1", TimeSpan.MaxValue)).WebDavResponse;
             }
             catch (LockedException)
             {
                 Console.Write("The item is locked.");
             }
             catch (MethodNotAllowedException)
             {
                 Console.Write("The item does not alow locks.");
             }
             if (lockInfo!= null)
             {
                 string timout = lockInfo.TimeOut == TimeSpan.MaxValue ? "Infinite" : lockInfo.TimeOut.TotalSeconds.ToString();
                 Console.WriteLine(lockInfo.Owner
                     + " " + lockInfo.LockToken.Href
                     + " " + lockInfo.LockToken.LockToken
                     + " " + lockInfo.LockScope
                     + " " + lockInfo.Deep
                     + " " + timout);
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.RefreshLockAsync(System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Prolongs the lock.
             </summary>
             <param name="lockToken">Identifies lock to be prolonged.</param>
             <param name="timeout">New timeout to set. Set to TimeSpan.MaxValue for infinity.</param>
             <param name="headers">Request headers.</param>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <returns>Instance of <see cref="T:ITHit.WebDAV.Client.LockInfo"/> with information about refreshed lock.</returns>
             <remarks>Server can set lock with different timeout than the one was asked.</remarks>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.PreconditionFailedException">
             The included lock token was not enforceable on this resource
             or the server could not satisfy the request in the lockinfo XML element.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">
             The resource is locked, so the method has been rejected.
             </exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IHierarchyItem item = (await session.GetFileAsync(new Uri("https://server:8580/Products/Sales.txt"))).WebDavResponse;
            
             LockInfo lockInfo = (await item.LockAsync(LockScope.Exclusive, true, "User 1", new TimeSpan(0, 30, 0))).WebDavResponse;
             string timout = lockInfo.TimeOut == TimeSpan.MaxValue ? "Infinite" : lockInfo.TimeOut.TotalSeconds.ToString();
             Console.WriteLine(lockInfo.Owner
                 + " " + lockInfo.LockToken.Href
                 + " " + lockInfo.LockToken.LockToken
                 + " " + lockInfo.LockScope
                 + " " + lockInfo.Deep
                 + " " + timout);
            
             lockInfo = (await item.RefreshLockAsync(lockInfo.LockToken.LockToken, new TimeSpan(1, 00, 0))).WebDavResponse;
             timout = lockInfo.TimeOut == TimeSpan.MaxValue ? "Infinite" : lockInfo.TimeOut.TotalSeconds.ToString();
             Console.WriteLine(lockInfo.Owner
                 + " " + lockInfo.LockToken.Href
                 + " " + lockInfo.LockToken.LockToken
                 + " " + lockInfo.LockScope
                 + " " + lockInfo.Deep
                 + " " + timout);
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.UnlockAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Remove the locks.
            </summary>
            <param name="lockToken">Identifies lock to be prolonged.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PreconditionFailedException">The item is not locked.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.MethodNotAllowedException">The item does not support locking.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The item doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            IHierarchyItem item = (await session.GetFileAsync(new Uri("https://server:8580/Products/Sales.txt"))).WebDavResponse;
            IFolder destFolder = (await session.GetFolderAsync(new Uri("https://server:8580/Info/"))).WebDavResponse;
            LockInfo lockInfo = (await item.LockAsync(LockScope.Shared, false, "User 1", new TimeSpan(0, 20, 0))).WebDavResponse;
            item.CopyTo(destFolder, "Copy of " + item.DisplayName, false, false);
            await item.UnlockAsync(lockInfo.LockToken.LockToken);
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.UnlockAsync(ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Removes the locks. For details <see cref="M:ITHit.WebDAV.Client.IHierarchyItem.UnlockAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.SupportedFeaturesAsync">
            <summary>
            Gets the information about functionality supported by server (Class 1, Class 2 and so on).
            </summary>
            <returns><see cref="T:ITHit.WebDAV.Client.OptionsInfo"/> object containing information about current server possibilities.</returns>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            IHierarchyItem item = (await session.GetFileAsync(new Uri("https://server:8580/Products/Sales.txt"))).WebDavResponse;
            if( ((await item.SupportedFeaturesAsync()).WebDavResponse.Features &amp; Features.Class2)!=0 )
                Console.WriteLine("Class 2 item. This item supports locking.");
            else
                Console.WriteLine("Class 1 item. This item does not support locking.");
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.GetCommentAsync">
            <summary>
            Brief comment about an item that is suitable for presentation to a user.
            </summary>
            <value>String representing a comment about an item.</value>
            <remarks>Can be used to indicate why version was created.</remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.GetCreatorDisplayNameAsync">
            <summary>
            Contains a description of the creator of the item that is suitable for presentation to a user. 
            </summary>
            <value>String representing a description of the creator of the item.</value>
            <remarks>Can be used to indicate who created that version.</remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.SetCommentAndAuthorAsync(System.String,System.String)">
            <summary>
            Updates comment and author information.
            </summary>
            <param name="comment">Comment about an item that is suitable for presentation to a user.</param>
            <param name="author">Description of the creator of the item.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Request is not authorized.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">
            The specified resource or folder is locked and the client either is not a lock
            owner or the lock type requires a lock token to be submitted and
            the client did not submit it.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This item is locked and no lock token was specified.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ConflictException">The item is version controlled and has to be checked out to be edited.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>                
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception>
            <example>
			The following example demonstrates how to lock item, check-out, update, check-in, unlock and set comment and author for a version.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
LockInfo lockInfo = (await file.LockAsync(LockScope.Exclusive, false, "John Walter", TimeSpan.MaxValue)).WebDavResponse;
await file.CheckOutAsync(lockInfo.LockToken.LockToken);
await file.UpdatePropertiesAsync(
    new Property[] {new Property(new PropertyName("amount", "server"), "2")}, null,
    lockInfo.LockToken.LockToken);
IVersion version = (await file.CheckInAsync(lockInfo.LockToken.LockToken)).WebDavResponse;
await file.UnlockAsync(lockInfo.LockToken.LockToken);
await version.SetCommentAndAuthorAsync("Fixed some bugs.", "John");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.SetCommentAndAuthorAsync(System.String,System.String,System.String)">
            <summary>
            Updates comment and author information.
            </summary>
            <param name="comment">Comment about an item that is suitable for presentation to a user.</param>
            <param name="author">Description of the creator of the item.</param>
            <param name="lockToken">Lock token for this item.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">This item is locked and invalid lock token was provided.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ConflictException">The item is version controlled and has to be checked out to be edited.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>                
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">In case of any unexpected error.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHierarchyItem.RefreshAsync">
            <summary>
            Rereads item properties from server.
            </summary>
            <remarks>Use this method after uploading item content or after any methods that modify item state on server.</remarks>
            <example>
			The following example demonstrates how to upload a file from local file system to a WebDAV server and that read file length from server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");
IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;

IFile davFile = (await folder.CreateFileAsync("products.xlsx")).WebDavResponse;
await davFile.UploadAsync("C:\\products.xlsx");
await davFile.RefreshAsync(); // ContentLength property becomes invalid after item content update, reread it from server
Console.WriteLine(davFile.ContentLength);
				]]>
			</code>
		</example>
        </member>
        <member name="P:ITHit.WebDAV.Client.IHierarchyItem.Properties">
            <summary>
            Custom properties retrieved by <see cref="!:IFolder.GetChildrenAsync(bool, PropertyName[])" /> call.
            </summary>
            <value>Array of custom properties.</value>
            <remarks>Use this property together with <see cref="!:IFolder.GetChildrenAsync(bool, PropertyName[])" /> method to retrieve items properties with a single request.</remarks>
            <example>
			The following example demonstrates how to get custom properties for all child items with a single request to server.
			<code>
				<![CDATA[
string license = "&lt;?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

PropertyName[] propNames = new PropertyName[2];
propNames[0] = new PropertyName("MyID", "Sales");
propNames[1] = new PropertyName("Branch", "Sales");

IFolder folder = (await session.GetFolderAsync( new Uri("https://server:8080/"))).WebDavResponse;
IList<IHierarchyItem>> children = (await folder.GetChildrenAsync(false, propNames)).WebDavResponse;
foreach (IHierarchyItem item in children)
{
	Console.WriteLine(item.DisplayName);
	foreach(Property prop in item.Properties)
	{
		Console.WriteLine(prop.Name.NamespaceUri + ":" + prop.Name.Name + " " + prop.StringValue);
    }
}
				]]>
			</code>
		</example>
        </member>
        <member name="T:ITHit.WebDAV.Client.IHistory">
            <summary>
            Contains all versions of a particular version-controlled item.
            </summary>
            <remarks>
            The important property of this interface is <see cref="T:System.IO.Path"/> property inherited from IHierarchyItem. 
            The url returned by this property is used by client applications to remove item from version control. 
            The client application submits DELETE WebDAV request to this url and the engine calls <see cref="!:IFile.PutUnderVersionControlAsync(bool)"/> 
            passing <b>false</b> as a parameter. In your <see cref="!:IFile.PutUnderVersionControlAsync(bool)"/> you will usually delete all versions. 
            </remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.IHistory.GetVersionSetAsync">
            <summary>
            All versions of current item.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.IItemContent">
            <summary>
            Provides file upload and download functionality.
            </summary>
            <remarks>
            You can use <see cref="!:UploadAsync(string, LockUriTokenPair[], CancellationToken)" /> / <see cref="M:ITHit.WebDAV.Client.IItemContent.DownloadAsync(System.String)" /> methods fo upload and download files to file system and 
            <see cref="!:GetReadStreamAsync(long,long)" /> 
            to upload and download files stored in a database or any other storage.
            </remarks>
            <example>
			The following example demonstrates how to upload a file from local file system to a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");
IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;

IFile file = (await folder.CreateFileAsync("products.xlsx")).WebDavResponse;
file.AllowWriteStreamBuffering = false;
file.TimeOut = 36000000; // 10 hours
await file.UploadAsync("C:\\products.xlsx");
				]]>
			</code>
		</example>
            <example>
			In the following example a file is downloaded from a WebDAV server to local file system.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile davFile = (await session.GetFileAsync(new Uri("https://server:8080/Products/image.gif"))).WebDavResponse;
await davFile.DownloadAsync("C:\\image.gif");
				]]>
			</code>
		</example>
        </member>
        <member name="P:ITHit.WebDAV.Client.IItemContent.ContentLength">
            <summary>
            Length of the file content.
            </summary>
            <value>Length or the file content in bytes.</value>
            <example>
			The following example demonstrates how to upload a file from local file system to a WebDAV server and that read file length from server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");
IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;

IFile davFile = (await folder.CreateFileAsync("products.xlsx")).WebDavResponse;
await davFile.UploadAsync("C:\\products.xlsx");
await davFile.RefreshAsync(); // ContentLength property becomes invalid after item content update, reread it from server
Console.WriteLine(davFile.ContentLength);
				]]>
			</code>
		</example>
        </member>
        <member name="P:ITHit.WebDAV.Client.IItemContent.ContentType">
            <summary>
            Content type of the file.
            </summary>
            <value>String representing mime-type of the file.</value>
        </member>
        <member name="M:ITHit.WebDAV.Client.IItemContent.GetReadStreamAsync(System.Int64,System.Int64,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Loads part of the content of the file from WebDAV server.
            </summary>        
            <param name="startIndex">Start position to retrieve <paramref name="count"/> number of bytes from.</param>
            <param name="count">Number of bytes to retrieve.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <remarks>
            If server supports <c>If-Range</c> header and last modification time do not match
            (the file content was modified) the library will throw <see cref="T:ITHit.WebDAV.Client.Exceptions.FileContentModifiedException"/> exception.
            </remarks>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.FileContentModifiedException">Content was modified on server.</exception>
            <returns>Stream to read resource content.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.IItemContent.GetReadStreamAsync">
            <summary>
            Loads content of the file from WebDAV server.
            </summary>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <returns>Stream to read resource content.</returns>
            <example>
			In the following example a file is downloaded from a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile davFile = (await session.GetFileAsync("https://server:8080/Products/image.gif")).WebDavResponse;
using (Stream webStream = await davFile.GetReadStreamAsync())
{
    int bufSize = 1048576; // 1Mb
    byte[] buffer = new byte[bufSize];
    int bytesRead = 0;
    using (FileStream fileStream = File.OpenWrite(davFile.DisplayName))
    {
        while ((bytesRead = await webStream.ReadAsync(buffer, 0, bufSize)) > 0)
            await fileStream.WriteAsync(buffer, 0, bytesRead);
    }
}
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IItemContent.GetReadStreamAsync(System.Int64,System.Int64,System.DateTime)">
             <summary>
             Loads part of the content of the file from WebDAV server using <paramref name="lastModifiedUtc"/>
             to ensure the content is up-to-date.
             </summary>
             <param name="startIndex">Start position to retrieve <paramref name="count"/> number of bytes from.</param>
             <param name="count">Number of bytes to retrieve.</param>
             <param name="lastModifiedUtc">The file modification date that will be passed in the <c>If-Range</c> header.
             If the file content was modified since passed modification date, the library will throw
             FileContentModified exception.</param>  
             <remarks>
             <para>
             Loads part of the content of the file from WebDAV server if it's content was not changed.
             If the content was modified the complete new content is returned. 
             </para>
             </remarks>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <returns>Stream to read file content.</returns>
             <example>
             This sample shows how to use the <see cref="M:ITHit.WebDAV.Client.IItemContent.GetReadStreamAsync(System.Int64,System.Int64,System.DateTime)"/> method.
             First 1024 bytes of server file are already saved to local file. Code tries to download the
             rest of the file content.
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;
             FileInfo file = new FileInfo("C:\\Temp\\Products.cff");
             IFile file = (await folder.GetResourceAsync(file.Name)).WebDavResponse;
             
             DateTime modifTime = file.LastModified.ToUniversalTime();
             int bufSize = 1048576; // 1Mb
             byte[] buffer = new byte[bufSize];
             int totalWritten = 1024;
            
             using (ContentStream stream = await file.GetReadStreamAsync(totalWritten, resource.ContentLength, modifTime))
             {
                 if (stream.ContentModified) 
                     totalWritten = 0; // entire file content is returned
             
                 using (FileStream fs = file.OpenWrite())
                 {
                     fs.Seek(totalWritten, SeekOrigin.Begin);
                     int bytesRead;
                     while ((bytesRead = stream.Read(buffer, 0, bufSize)) > 0)
                         fs.Write(buffer, 0, bytesRead);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IItemContent.GetReadStreamAsync(System.Int64,System.Int64,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Loads part of the content of the file from WebDAV server using <paramref name="eTag"/> to
             ensure the content is up-to-date.
             </summary>
             <param name="startIndex">Start position to retrieve <paramref name="count"/> number of bytes from.</param>
             <param name="count">Number of bytes to retrieve.</param>
             <param name="eTag">The ETag that will be passed in the <c>If-Range</c> header.</param> 
             <param name="headers">Request headers.</param>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <remarks>
             <para>
             Loads part of the content of the file from WebDAV server if it's content was not changed.
             If the content was modified the complete new content is returned.
             </para>       
             </remarks>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <returns>Stream to read file content.</returns>
             <example>
             This sample shows how to use the <see cref="!:GetReadStreamAsync(long,long,string)"/> method.
             First 1024 bytes of server file are already saved to local file. Code tries to download the
             rest of the file content.
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;
             FileInfo file = new FileInfo("C:\\Temp\\Products.cff");
             IFile file = (await folder.GetResourceAsync(file.Name)).WebDavResponse;
             
             string etag = file.Etag;
             int bufSize = 1048576; // 1Mb
             byte[] buffer = new byte[bufSize];
             int totalWritten = 10;
            
             using (ContentStream stream = await file.GetReadStreamAsync(totalWritten, resource.ContentLength, etag, out contentModified))
             {
                 if (stream.ContentModified)
                     totalWritten = 0; // entire file content is returned
                 using (FileStream fs = file.OpenWrite())
                 {
                     fs.Seek(totalWritten, SeekOrigin.Begin);
                     int bytesRead;
                     while ((bytesRead = (await stream.ReadAsync(buffer, 0, bufSize))) > 0)
                         await fs.WriteAsync(buffer, 0, bytesRead);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IItemContent.DownloadAsync(System.String)">
            <summary>
            Downloads content of the file to a file specified by <paramref name="filename" />.
            </summary>
            <param name="filename">Full path of a file to be downloaded to</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">File is empty.</exception>
            <example>
			In the following example a file is downloaded from a WebDAV server to local file system.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile davFile = (await session.GetFileAsync(new Uri("https://server:8080/Products/image.gif"))).WebDavResponse;
await davFile.DownloadAsync("C:\\image.gif");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IItemContent.UploadAsync(System.String,ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Uploads content of a file specified by <paramref name="filename" /> to the server.
            </summary>
            <param name="filename">Full path of a file to be uploaded from</param>
            <param name="lockTokens">Lock tokens for this resource.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ConflictException">
            The resource is version controlled and has to be checked out to be edited.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">File is empty.</exception>
            <example>
			The following example demonstrates how to upload a file from local file system to a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");
IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;

IFile file = (await folder.CreateFileAsync("products.xlsx")).WebDavResponse;
file.AllowWriteStreamBuffering = false;
file.TimeOut = 36000000; // 10 hours
await file.UploadAsync("C:\\products.xlsx");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IItemContent.UploadAsync(System.Func{System.IO.Stream,System.Threading.Tasks.Task},System.Int64,ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Uploads content of a file specified by function <paramref name="onStreamAvailable" /> to the server.
            </summary>
            <param name="onStreamAvailable">Function to upload file content.</param>
            <param name="fileLength">File content length.</param>
            <param name="lockTokens">Lock tokens for this resource.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ConflictException">
            The resource is version controlled and has to be checked out to be edited.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">File is empty.</exception>
            <example>
			The following example demonstrates how to upload a file from local file system to a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");
IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;

IFile file = (await folder.CreateFileAsync("products.xlsx")).WebDavResponse;
file.AllowWriteStreamBuffering = false;
file.TimeOut = 36000000; // 10 hours
await file.UploadAsync("C:\\products.xlsx");
				]]>
			</code>
		</example>
        </member>
        <member name="P:ITHit.WebDAV.Client.IItemContent.ResumableUpload">
            <summary>
             Returns instance of <see cref="T:ITHit.WebDAV.Client.IResumableUpload"/> to manage partially failed uploads.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IItemContent.Etag">
            <summary>
            Gets entity tag - string that identifies current state of file's content. 
            </summary>
            <remarks>
            Server updates this this property when file content changes. 
            This property is not updated when file is locked, unlocked or its properties change.
            More information about etags is available here: http://en.wikipedia.org/wiki/HTTP_ETag
            </remarks>
            <value>
            Usually server will return here cheksum or hash or counter which increases with every
            modification.
            If server does not support ETags <c>null</c> is returned.
            </value>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.DavConstants">
            <summary>
            WebDAV constants.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.PropertyNames">
            <summary>
            DeltaV and WebDAV Live Properties
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.File">
            <see cref="T:ITHit.WebDAV.Client.IFile"/>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.File.ProcessGetResponseHeaders(System.Net.WebHeaderCollection)">
            <summary>
            Refreshes some info like Etag about resource, taking it from resp header
            </summary>
            <param name="headers">Collection of headers returned</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.File.RefreshContentLength(System.String)">
            <summary>
            Refreshes ContentLength property of the resource from resp headers in case the whole
            content was returned
            </summary>
            <param name="contentLen">Value of Content-Length header</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.Folder">
            <see cref="T:ITHit.WebDAV.Client.IFolder"/>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.HierarchyItem">
            <see cref="T:ITHit.WebDAV.Client.IHierarchyItem"/>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.HierarchyItem.GetResourceType(ITHit.WebDAV.Client.Methods.Response)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.HierarchyItem.HrefEquals(System.Uri,System.Uri)">
            <summary>
            Checks whether given URIs are equal (by absolute paths)
            </summary>
            <param name="href1">First URI</param>
            <param name="href2">Second URI</param>
            <returns>True, if given URIs are equal</returns>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.LoggingHandler">
            <summary>
            Logs request and response headers.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.LoggingHandler.#ctor(ITHit.WebDAV.Client.ISession,System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates instance of this class. 
            </summary>
            <param name="innerHandler">Inner handler.</param>
            <param name="session">WebDavSession object.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.LoggingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.PushContent">
            <summary>
            Implements push request stream model for HttpClient class. Also whraps stream for logging purposes.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.ResumableUpload.GetLastChunkSavedAsync">
            <summary>
            The date and time when the last chunk of file was saved in your storage.
            </summary>
            <remarks>
            <para></para>
            <para>Requested by the Engine during a call to IUploadProgress.UploadProgress.</para>
            </remarks>        
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.ResumableUpload.GetPercentReadAsync">
            <summary>
            Percent of data processed from last request which updates resource's content.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.RetryHandler">
            <summary>
            Retrying HttpClient unsuccessful requests.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.RetryHandler.#ctor(ITHit.WebDAV.Client.ISession,System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates instance of this class. 
            </summary>
            <param name="session">WebDavSession object.</param>
            <param name="innerHandler">Inner handler.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.Version">
            <see cref="T:ITHit.WebDAV.Client.IVersion"/>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.VersionHistory">
            <see cref="T:ITHit.WebDAV.Client.IHistory"/>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.WebRequest">
            <see cref="T:ITHit.WebDAV.Client.IWebRequest"/>
        </member>
        <member name="E:ITHit.WebDAV.Client.Impl.WebRequest.WebDavError">
            <summary>
            Event fired when any error occures during the request. 
            Fired before the library throws the exceprion.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.WebRequest.OnWebDavError(ITHit.WebDAV.Client.WebDavErrorEventArgs)">
            <summary>
            Rises the <see cref="E:ITHit.WebDAV.Client.Impl.WebRequest.WebDavError"/> event.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.WebRequest.AddHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds headers.
            </summary>
            <param name="headers">headers</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Impl.WebResponse">
            <summary>
            Implementation of <see cref="T:ITHit.WebDAV.Client.IWebResponse"/> interface.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.WebResponse.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:ITHit.WebDAV.Client.Impl.WebResponse"/> class
            </summary>
            <param name="responseMessage">A <see cref="T:System.Net.Http.HttpResponseMessage"/> HTTP response.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Impl.WebResponse.GetResponseStreamAsync">
            <summary>
            See <see cref="M:ITHit.WebDAV.Client.IWebResponse.GetResponseStreamAsync"/>
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.Impl.WebResponse.Status">
            <summary>
            See <see cref="P:ITHit.WebDAV.Client.IWebResponse.Status"/>
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.Impl.WebResponse.Encoding">
            <exclude/>
        </member>
        <member name="T:ITHit.WebDAV.Client.IMultistatus">
             <summary>
             Represents information about errors occurred in different elements. 
             </summary>
             <remarks>The <see cref="P:ITHit.WebDAV.Client.IMultistatus.Responses"/> property of this class provides access to the array of descriptions of each individual operation that occurred on server. The <see cref="P:ITHit.WebDAV.Client.IMultistatus.Description"/> property provides total description of all failed operations.</remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFolder folder = await session.GetFolderAsync(new Uri("https://server/Library"));
            
             try
             {
                 await folder.DeleteAsync();
             }
             catch(WebDavHttpException ex)
             { 
                 Console.WriteLine(ex.Status.Code + " " + ex.Status.Description + " " + ex.Message);
                 foreach(IMultistatusResponse resp in ex.Multistatus.Responses)
                 {// Find which items failed to delete.
                     Console.WriteLine(resp.Href + " " + resp.Status.Code + " " + resp.Status.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:ITHit.WebDAV.Client.IMultistatus.Description">
            <summary>
            Gets the generic description, if available.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IMultistatus.Responses">
            <summary>
            Array of the errors returned by server.
            </summary>
            <remarks>Either <see cref="T:ITHit.WebDAV.Client.IMultistatusResponse"/> or <see cref="T:ITHit.WebDAV.Client.IPropertyMultistatusResponse"/>.</remarks>
        </member>
        <member name="T:ITHit.WebDAV.Client.IMultistatusResponse">
             <summary>
             Represents error occurred in one element.
             </summary>
             <remarks>This interface represents an individual description of an error in the list of errors returned by server. It provides the means for finding HTTP status, url and description of each copy, move or delete operation.</remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFolder folder = await session.GetFolderAsync(new Uri("https://server/Library"));
            
             try
             {
                 await folder.DeleteAsync();
             }
             catch(WebDavHttpException ex)
             { 
                 Console.WriteLine(ex.Status.Code + " " + ex.Status.Description + " " + ex.Message);
                 foreach(IMultistatusResponse resp in ex.Multistatus.Responses)
                 {// Find which items failed to delete.
                     Console.WriteLine(resp.Href + " " + resp.Status.Code + " " + resp.Status.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:ITHit.WebDAV.Client.IMultistatusResponse.Href">
            <summary>
            Url of the item.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IMultistatusResponse.Description">
            <summary>
            Description of error, if available.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IMultistatusResponse.Status">
            <summary>
            HTTP Status of the operation.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.IPropertyMultistatusResponse">
             <summary>
             Provides means for finding which properties failed to update.
             </summary>
             <remarks>This interface represents an individual description of an error in the list of errors returned by server. It provides the means for finding name of the property that failed to add, update or delete during the call to <see cref="M:ITHit.WebDAV.Client.IHierarchyItem.UpdatePropertiesAsync(ITHit.WebDAV.Client.Property[],ITHit.WebDAV.Client.PropertyName[])"/>. The <see cref="P:ITHit.WebDAV.Client.IPropertyMultistatusResponse.PropertyName"/> member of this class returns the name of the property that failed to add, update or delete.</remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFile file = await session.GetFileAsync(new Uri("https://server/Library/doc.txt"));
            
             Property[] propsToAddAndUpdate = new Property[3];
             propsToAddAndUpdate[0] = new Property(new PropertyName("Ammount", "CorpNS"), "1200");
             propsToAddAndUpdate[1] = new Property(new PropertyName("ManagerApproved", "Sales"), "Yes");
             propsToAddAndUpdate[2] = new Property(new PropertyName("Branch", "Sales"), "EMEA Region");
            
             PropertyName[] propsToDelete = new PropertyName[2];
             propsToDelete[0] = new PropertyName("InternalName", "Sales");
             propsToDelete[1] = new PropertyName("Counter", "CorpNS");
            
             try
             {
                 await file.UpdatePropertiesAsync(propsToAddAndUpdate, propsToDelete);
             }
             catch(PropertyException ex)
             {
                 // Find which properties failed to add/update/delete
                 foreach(IPropertyMultistatusResponse propInfo in ex.Multistatus.Responses)
                 {
                     Console.WriteLine(propInfo.PropertyName + " " + propInfo.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="P:ITHit.WebDAV.Client.IPropertyMultistatusResponse.PropertyName">
            <summary>
            Name of the property, if element is property. Otherwise null.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.IWebDavResponse`1">
            <summary>
            WebDAV response.
            </summary>
            <remarks>
            In addition to properties and methods provided by <see cref="T:ITHit.WebDAV.Client.IResponse"/> this interface provides <see cref="T:ITHit.WebDAV.Client.IWebDavResponse`1"/> property. 
            Which contains WebDAV file or folder or items list returned by the server.  
            </remarks>
            <typeparam name="T">Type of item or list returns by WebDAV server.</typeparam>
        </member>
        <member name="P:ITHit.WebDAV.Client.IWebDavResponse`1.WebDavResponse">
            <summary>
            File or folder or items list returned by the server.  
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.IResponse">
            <summary>
            Server response.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IResponse.Headers">
            <summary>
            Response Headers.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IResponse.Status">
            <summary>
            Response Status.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.IResumableUpload">
             <summary>
             Provides support partial uploads and resuming broken uploads.
             </summary>
             <remarks>
             <para>
             Using this interface you can upload files to servers that support resumable upload, pause, cancel and restore broken uploads. You can also request amount of bytes successfully saved on server side.
             </para>    
             <para>
             To detect if server supports resumable upload feature probe the <see cref="F:ITHit.WebDAV.Client.Features.ResumableUpload"/> bit in <see cref="T:ITHit.WebDAV.Client.Features"/> enumeration. The server will return resumable-upload token in DAV header in response to OPTIONS request if resumable upload is supported by the file.
             </para>
             <para>
             To upload chunks of the file content use the <see cref="!:WriteStreamAsync(Func,long,long,long,string,LockUriTokenPair[])"/> method. This method will attach <c>Content-Range: bytes XXX-XXX/XXX</c> header only if partial content is submitted. 
             </para>
             To pause the upload you will simply break the connection. Call Stream.Close() on a stream object passed to <see cref="!:WriteStreamAsync(Func,long,long,long,string,LockUriTokenPair[])"/> method. 
             <para>
             To restore the upload call the <see cref="M:ITHit.WebDAV.Client.IResumableUpload.GetBytesUploadedAsync"/> method. It will return number of bytes successfully uploaded and saved on server side. Use this value to resume the upload from the next byte using stream passed to <see cref="!:WriteStreamAsync(Func,long,long,long,string,LockUriTokenPair[])"/>.
             </para>
             <para>
             To completely break the upload call <see cref="M:ITHit.WebDAV.Client.IResumableUpload.CancelUploadAsync"/>. This will signal to server that you do not plan to restore the upload and all temporary files on server side, if any, can be deleted.
             </para>
             </remarks>
             <example>
             <para>
             Following example demonstrates how to determine if server supports resumable upload:
             <code>
             <![CDATA[
              string license = "<?xml version='1.0' encoding='utf...
              WebDavSession session = new WebDavSession(license);            
              IFile file = await session.GetFileAsync("https://server:8580/file1.txt");    
              bool resumableUploadSupported =
                            ((await file.SupportedFeaturesAsync()).Features & Features.ResumableUpload) != 0;
             ]]>
             </code>
             </para>
             </example>
             <example>
             <para>
             The following example demonstrates pausing and canceling the upload.
             One stream performs upload while it is paused from another stream by closing connection.
             <code>
             <![CDATA[
             private Stream uploadStream;
             IResumableUpload resumableUpload;
            
             //This method performs uploading in separate thread.
             public void uploadThread()
             {
                 try
                 {
                     string license = "<?xml version='1.0' encoding='utf...
                     WebDavSession session = new WebDavSession(license);
                     IFolder folder = await session.GetFolderAsync(new Uri("https://server:8580/Sales"));
                     FileInfo file = new FileInfo("C:\\LargeFile.exe");
                     LockInfo lockInfo = await folder.LockAsync(LockScope.Exclusive, true, "User 1", new TimeSpan(0, 30, 0));
                     Uri RemoteStorageUri = new Uri($"https://server:8080/Sales/{file.Name}");
                     LockUriTokenPair[] lockTokens = new LockUriTokenPair[] { new LockUriTokenPair(RemoteStorageUri, lockInfo.LockToken.LockToken) };
                     IFile davFile = await folder.CreateFileAsync(file.Name, lockTokens);
                     IResumableUpload resumableUpload = davFile.ResumableUpload;
                     
                     Stream uploadStream = null;
                     await session.UploadAsync(RemoteStorageUri, async (outputStream) =>
                     {
                         uploadStream = webStream;
             
                         int bufSize = 1048576; // 1Mb
                         byte[] buffer = new byte[bufSize];
                         int bytesRead = 0;
            
                         using (var fileStream = file.OpenRead())
                         {
                             while ((bytesRead = await fileStream.ReadAsync(buffer, 0, bufSize)) > 0)
                                 await outputStream.WriteAsync(buffer, 0, bytesRead);
                         }
                     }, null, file.Length, 0, -1, lockTokens, null);
                 }
                 catch (StreamClosedException)
                 {
                     // Upload was terminated (paused) by user from another thread.
                 }
             
             //This is UI thread in which user wants to pause upload.
             public void uiThreadPause()
             {
                 if (uploadStream != null)
                 {
                    uploadStream.Close(); //Break connection.
                 }
             }
             
             //This is UI thread in which user wants to cancel upload.
             public void uiThreadCancel()
             {
                 if (uploadStream != null)
                 {
                    uploadStream.Close(); //Break connection.
                    await resumableUpload.CancelUploadAsync(); //Cancel upload if we are not going to resume it later so server could clean the files.
                 }
             }
             ]]>
             </code>
             </para>
             </example>
             <example>
             <para>The following example demonstrates how to restore (resume) broken upload. This example first requests number of bytes uploaded to server and then starts upload from the next byte.</para>
             <code>
             <![CDATA[
             string license = "<?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);        
             FileInfo file = new FileInfo("C:\\LargeFile.exe");
             IFile file = await session.GetFileAsync("https://server:8580/"; + file.Name);
             long bytesUploaded = await file.ResumableUpload.GetBytesUploadedAsync();
             await davFile.ResumableUpload.WriteStreamAsync(async (outputStream) =>
                     {
                         int bufSize = 1048576; // 1Mb
                         byte[] buffer = new byte[bufSize];
            
                         using (var fileStream = file.OpenRead())
                         {
                             fileStream.Seek(bytesUploaded, SeekOrigin.Begin);
                             int bytesRead;
                             while ((bytesRead = await fileStream.ReadAsync(buffer, 0, bufSize)) > 0)
                             {
                                 outputStream.Write(buffer, 0, bytesRead);
                             }
                         }
                     }, bytesUploaded, file.Length - bytesUploaded, file.Length, null, lockTokens);
             ]]>
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IResumableUpload.WriteStreamAsync(System.Func{System.IO.Stream,System.Threading.Tasks.Task},System.Int64,System.Int64,System.Int64,System.String,ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Saves files's partial content to WebDAV server.
            </summary>
            <param name="onStreamAvailable">Function to write to request stream.</param>
            <param name="contentType">Media type of the file.</param>
            <param name="contentLength">Length of data to be written.</param>
            <param name="resourceTotalSize">Total size of the resource content.</param>
            <param name="lockTokens">Lock tokens for this file.</param>
            <param name="startIndex">Index to the first byte in the file content to be set by the request.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <remarks>
            <para>
            This method issues a PUT request and appends Content-Range header of the form <c>Content-Range: bytes 21010-35145/47022</c> if necessary.
            </para>
            <para>
            It will attach <c>Content-Range: bytes XXX-XXX/XXX</c> header only if partial content is submitted. You can always use this method instead of <c>IItemContent.GetWriteStream</c> as Content-Range header is not attached if you upload entire file.
            </para>
            <para>
            To upload partial content to IT Hit WebDAV Server Engine you must implement ITHit.WebDAV.Server.ResumableUpload.IResumableUpload interface on server items.
            </para>
            </remarks>                              
        </member>
        <member name="M:ITHit.WebDAV.Client.IResumableUpload.GetBytesUploadedAsync">
            <summary>
            Amount of bytes successfully uploaded to server.
            </summary>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotImplementedException">Is thrown if server doesn't support resumable upload.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>   
            <remarks>
            <para>Usually you will use value returned by this property to restore broken upload.</para>
            <para>This method submits REPORT request to a file with upload-progress type.</para>
            </remarks>
            <returns>Number of bytes uploaded to server or -1 if server did not provide info about how much bytes uploaded.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.IResumableUpload.CancelUploadAsync">
            <summary>
            Cancels upload of the file. 
            </summary>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception> 
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">File is locked and valid lock token was not specified.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>                              
            <remarks>
            <para>This method submits CANCELUPLOAD request to a file. The server should cancel the file upload and remove temporary files if any. </para>
            <para>If your server is based on IT Hit WebDAV Server Engine and the item was automatically checked-out by server Engine when upload started it will be automatically checked-in by server Engine after this call.</para>
            </remarks>
            <example>
            Request:
            <code>
            <![CDATA[
            CANCELUPLOAD /LargeFile.doc HTTP/1.1
            Host: https://server:8580/
            ]]>
            </code>
            
            Response:
            <code>
            <![CDATA[
            HTTP/1.1 200 OK
            ]]>
            </code>
            </example>        
        </member>
        <member name="M:ITHit.WebDAV.Client.IResumableUpload.CancelUploadAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Cancels upload of the file. 
            </summary>
            <param name="lockToken">Lock token for this file.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This file doesn't exist on the server.</exception> 
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">File is locked and valid lock token was not specified.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>                              
            <remarks>
            <para>This method submits CANCELUPLOAD request to a file. The server should cancel the file upload and remove temporary files if any. </para>
            <para>If your server is based on IT Hit WebDAV Server Engine and the item was automatically checked-out by server Engine when upload started it will be automatically checked-in by server Engine after this call.</para>
            </remarks>
        </member>
        <member name="T:ITHit.WebDAV.Client.ISynchronizationCollection">
            <summary>
            Provides synchronization support. Allows efficient synchronization of he contents of a WebDAV collection.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.ISynchronizationCollection.GetChangesAsync(System.Collections.Generic.IList{ITHit.WebDAV.Client.PropertyName},System.String,System.Boolean,System.Nullable{System.Int64},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Returns a list of changes that correspond to a synchronization request. 
            </summary>
            <param name="propNames">List of properties to retrieve with the children. They will be queried by the engine later.</param>
            <param name="syncToken">The synchronization token provided by the server and returned by the client. This method must return items that changed since this token was retuned by the server. This parameter is null or empty in case of full synchronization.</param>
            <param name="deep">Indicates the "scope" of the synchronization report request, false - immediate children and true - all children at any depth.</param>
            <param name="limit">The number of items to return. Null in case of no limit.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>List of changes that that happened since the synchronization token provided.</returns>
        </member>
        <member name="T:ITHit.WebDAV.Client.ItemType">
            <summary>
            Type of <see cref="T:ITHit.WebDAV.Client.IHierarchyItem"/>.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.ItemType.File">
            <summary>
            An item is a file.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.ItemType.Folder">
            <summary>
            An item is a folder.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.ItemType.Version">
            <summary>
            An item is a version.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.ItemType.VersionHistory">
            <summary>
            An item is a version-history.
            </summary>
            <exclude/>
        </member>
        <member name="T:ITHit.WebDAV.Client.IVersion">
            <summary>
            Represents a single file version.
            </summary>
            <remarks>
            You can read version content and request properties as you usually do for a file 
            but you cannot update content or properties.
            </remarks>
            <example>
			The following example demonstrates how to list file versions.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
IList<IVersion>> versions = (await file.GetVersionsAsync()).WebDavResponse;
foreach (IVersion version in versions)
{
    MessageBox.Show(version.VersionName);
}
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.IVersion.GetSuccessorsAsync">
            <summary>
            Returns successors of this version.
            </summary>
            <value>Array of this version successors.</value>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">The user is not authorized.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This version doesn't exist on server any more.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">An error occured while processing response.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.IVersion.GetPredecessorsAsync">
            <summary>
            Returns predessors of this version.
            </summary>
            <value>Array of this version predecessors.</value>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">The user is not authorized.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This version doesn't exist on server any more.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">An error occured while processing response.</exception>
        </member>
        <member name="M:ITHit.WebDAV.Client.IVersion.GetVersionableItemAsync">
            <summary>
            <see cref="T:ITHit.WebDAV.Client.IFile"/> item this version relates to.
            </summary>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">The user is not authorized.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This version doesn't exist on server any more.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>        
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">An error occured while processing response.</exception>        
        </member>
        <member name="P:ITHit.WebDAV.Client.IVersion.VersionName">
            <summary>
            Name of the version.
            </summary>
            <value>String representing version name.</value>
            <remarks>
            This property contains a server-defined string that is different for each version. 
            This string is intended for display for a user.
            </remarks>
            <example>
			The following example demonstrates how to list file versions.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync(new Uri("https://server/directory/file.docx"))).WebDavResponse;
IList<IVersion>> versions = (await file.GetVersionsAsync()).WebDavResponse;
foreach (IVersion version in versions)
{
    MessageBox.Show(version.VersionName);
}
				]]>
			</code>
		</example>
        </member>
        <member name="T:ITHit.WebDAV.Client.IWebRequest">
            <summary>
            Represents a request to the server.
            </summary>
            <exclude/>
        </member>
        <member name="E:ITHit.WebDAV.Client.IWebRequest.WebDavError">
            <summary>
            Event fired in case of any error.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.IWebRequest.Method">
            <exclude/>
        </member>
        <member name="P:ITHit.WebDAV.Client.IWebRequest.Headers">
            <exclude/>
        </member>
        <member name="P:ITHit.WebDAV.Client.IWebRequest.ContentType">
            <exclude/>
        </member>
        <member name="P:ITHit.WebDAV.Client.IWebRequest.ContentLength">
            <exclude/>
        </member>
        <member name="P:ITHit.WebDAV.Client.IWebRequest.ContentRange">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.IWebRequest.GetResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Sends this request to the server.
            </summary>
            <returns>Server response.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.IWebRequest.SetPushStreamFunc(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task})">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.IWebRequest.AddRange(System.Int64,System.Int64)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.IWebRequest.AddHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <exclude/>
        </member>
        <member name="T:ITHit.WebDAV.Client.IWebResponse">
            <summary>
            Interface for responses from server.
            </summary>
            <see cref="T:System.Net.HttpWebResponse"/>
            <exclude/>
        </member>
        <member name="P:ITHit.WebDAV.Client.IWebResponse.Headers">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.IWebResponse.GetHeaderValue(System.String)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.IWebResponse.GetResponseStreamAsync">
            <exclude/>
        </member>
        <member name="P:ITHit.WebDAV.Client.IWebResponse.Status">
            <exclude/>
        </member>
        <member name="P:ITHit.WebDAV.Client.IWebResponse.Encoding">
            <exclude/>
        </member>
        <member name="T:ITHit.WebDAV.Client.IDownloadResponse">
            <summary>
            Provides access to response stream.
            </summary>
            <remarks>
            In addition to properties and methods provided by <see cref="T:ITHit.WebDAV.Client.IResponse"/> this inteface provides access to response stream.
            </remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.IDownloadResponse.GetResponseStreamAsync">
            <summary>
            Returns response stream.
            </summary>
            <returns>Response stream.</returns>
        </member>
        <member name="T:ITHit.WebDAV.Client.License.LicenseChecker">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.License.LicenseChecker.CheckLicense(System.String)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.License.LicenseChecker.CheckLicense(System.String,System.String[])">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.License.LicenseChecker.AddBigIntegers(System.Int64,System.Int64)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.License.LicenseChecker.DivideBigIntegers(System.Int64[],System.Int64)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.License.LicenseChecker.MultiplyBigIntegers(System.Int64,System.Int64)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.License.LicenseChecker.SubtractBigIntegers(System.Int64,System.Int64)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.License.LicenseChecker.UnaryNegationBigInteger(System.Int64)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.License.LicenseChecker.LessThanOrEqualBigInteger(System.Int64,System.Int64)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.License.LicenseChecker.ModulusBigInteger(System.Int64,System.Int64)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.License.LicenseChecker.CryptographyTest">
            <exclude/>
        </member>
        <member name="T:ITHit.WebDAV.Client.License.LicenseValidator">
            <summary>
            Summary description for LicenseValidator.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.LockInfo">
            <summary>
            Information about lock set on an item.
            </summary>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            IHierarchyItem item = await session.GetFileAsync(new Uri("https://server:8580/Products/Sales.txt"));
            foreach(LockInfo lockInfo in item.ActiveLocks)
            {
                string timout = lockInfo.TimeOut == TimeSpan.MaxValue ? "Infinite" : lockInfo.TimeOut.TotalSeconds.ToString();
                Console.WriteLine(lockInfo.Owner 
                    + " " + lockInfo.LockToken.Href 
                    + " " + lockInfo.LockToken.LockToken 
                    + " " + lockInfo.LockScope 
                    + " " + lockInfo.Deep
                    + " " + timout);
            }
            </code>
            </example>
        </member>
        <member name="F:ITHit.WebDAV.Client.LockInfo.LockScope">
            <summary>
            Scope of the lock.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.LockInfo.Deep">
            <summary>
            Whether lock is set on item's children.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.LockInfo.Owner">
            <summary>
            Owner's name.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.LockInfo.TimeOut">
            <summary>
            Timeout until lock expires.
            </summary>
            <remarks>
            <b>TimeSpan.MaxValue</b> means infinity (no expiration).
            </remarks>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            IHierarchyItem item = await session.GetFileAsync(new Uri("https://server:8580/Products/Sales.txt"));
            LockInfo lockInfo = await item.LockAsync(LockScope.Shared, false, "User 1", TimeSpan.MaxValue);
            string timout = lockInfo.TimeOut == TimeSpan.MaxValue ? "Infinite" : lockInfo.TimeOut.TotalSeconds.ToString();
            Console.WriteLine(lockInfo.Owner 
                + " " + lockInfo.LockToken.Href 
                + " " + lockInfo.LockToken.LockToken 
                + " " + lockInfo.LockScope 
                + " " + lockInfo.Deep 
                + " " + timout);
            </code>
            </example>
        </member>
        <member name="F:ITHit.WebDAV.Client.LockInfo.LockToken">
            <summary>
            Lock token.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.LockInfo.#ctor(ITHit.WebDAV.Client.LockScope,System.Boolean,System.String,System.TimeSpan,ITHit.WebDAV.Client.LockUriTokenPair)">
            <summary>
            Initializes new instance of <see cref="T:ITHit.WebDAV.Client.LockInfo"/>.
            </summary>
            <param name="lockScope">Scope of the lock.</param>
            <param name="deep">Whether lock is set on item's children.</param>
            <param name="owner">Owner's name.</param>
            <param name="timeOut">Timeout until lock expires.</param>
            <param name="lockToken">Lock token.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.LockInfo.ParseLockDiscoveryAsync(ITHit.WebDAV.Client.Property,System.Uri)">
            <summary>
            Parses lockdiscovery property.
            </summary>
            <param name="lockdiscoveryProp">Lockdiscovery property.</param>
            <param name="href">request's URI</param>
            <returns>Array of locks</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.LockInfo.ParseLockInfoAsync(System.Xml.XmlReader,System.Uri)">
            <summary>
            Initializes new instance of <see cref="T:ITHit.WebDAV.Client.LockInfo"/>.
            </summary>
            <param name="reader">Reader containing activelock xml.</param>
            <param name="href">Request's URI.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.LockScope">
             <summary>
             Scope of the lock.
             </summary>
             <remarks>Represents exclusive or shared lock.</remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IHierarchyItem item = await session.GetFileAsync(new Uri("https://server:8580/Products/Sales.txt"));
            
             LockInfo lockInfo = null;
             try
             {
                 lockInfo = await item.LockAsync(LockScope.Shared, false, "User 1", TimeSpan.MaxValue);
             }
             catch (LockedException)
             {
                 Console.Write("The item is locked.");
             }
             catch (MethodNotAllowedException)
             {
                 Console.Write("The item does not alow locks.");
             }
             if (lockInfo!= null)
             {
                 string timout = lockInfo.TimeOut == TimeSpan.MaxValue ? "Infinite" : lockInfo.TimeOut.TotalSeconds.ToString();
                 Console.WriteLine(lockInfo.Owner
                     + " " + lockInfo.LockToken.Href
                     + " " + lockInfo.LockToken.LockToken
                     + " " + lockInfo.LockScope
                     + " " + lockInfo.Deep
                     + " " + timout);
             }
             </code>
             </example>
        </member>
        <member name="F:ITHit.WebDAV.Client.LockScope.Exclusive">
            <summary>
            Exclusive lock.
            </summary>
            <remarks>No one else can obtain the lock.</remarks>
        </member>
        <member name="F:ITHit.WebDAV.Client.LockScope.Shared">
            <summary>
            Shared lock.
            </summary>
            <remarks>It will be possible for another clients to get the shared locks.</remarks>
        </member>
        <member name="T:ITHit.WebDAV.Client.LockUriTokenPair">
            <summary>
            Represents pair of file or folder uri - lock token. Used to access
            locked resources.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.LockUriTokenPair.Href">
            <summary>
            Path to the locked file or folder.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.LockUriTokenPair.LockToken">
            <summary>
            Lock token.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.LockUriTokenPair.#ctor(System.Uri,System.String)">
            <summary>
            Initializes new instance of <see cref="T:ITHit.WebDAV.Client.LockUriTokenPair"/>.
            </summary>
            <param name="href">Path to the locked file or folder.</param>
            <param name="lockToken">Lock token.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Logger.LogLevel">
            <summary>
            Type of information being logged.
            </summary>
            <example>
            <code>
            FileLogger.LogFile = "C:\WebDAV\WebDavSessionLog.txt"; // C:\WebDAV\ must exist and the application must have enough permission to write and create files in this folder
            FileLogger.Level = LogLevel.Warn;
            FileLogger.WriteMessage("My error message", LogLevel.Error); // this message will be written to the log file
            FileLogger.WriteMessage("My debug message", LogLevel.Debug); // this message will not be written to the log file
            FileLogger.WriteMessage("My info message"); // this message will not be written to the log file
            </code>
            </example>
        </member>
        <member name="F:ITHit.WebDAV.Client.Logger.LogLevel.All">
            <summary>
            All messages will be written to log.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Logger.LogLevel.Debug">
            <summary>
            Messages with <c>LogLevel.Debug</c> level will be written to log.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Logger.LogLevel.Info">
            <summary>
            Messages with <c>LogLevel.Info</c> level will be written to log.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Logger.LogLevel.Warn">
            <summary>
            Messages with <c>LogLevel.Warn</c> level will be written to log.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Logger.LogLevel.Error">
            <summary>
            Messages with <c>LogLevel.Error</c> level will be written to log.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Logger.LogLevel.Fatal">
            <summary>
            Messages with <c>LogLevel.Fatal</c> level will be written to log.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Logger.LogLevel.Off">
            <summary>
            No messages will be written to log.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Logger.NamespaceDoc">
            <summary>
            The ITHit.WebDAV.Client.Logger namespace provides FileLogger class and LogLevel enum. This namespace provides functionality for logging HTTP content and headers transmitted between server and client.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.CancelUploadMethod">
            <summary>
            Method to perform Delete request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Checkin">
            <summary>
            Method to perform Checkin request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Checkout">
            <summary>
            Method to perform Checkout request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.CopyMove">
            <summary>
            Method to perform Copy or Move request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Delete">
            <summary>
            Method to perform Delete request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Get">
            <summary>
            Method to perform Delete request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Head">
            <summary>
            Method to perform Head request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.HttpMethod">
            <summary>
            Base class for all Http methods.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Lock">
            <summary>
            Method to perform Lock request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Mkcol">
            <summary>
            Method to perform Mkcol request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.MultiResponse">
            <summary>
            Parses and contains information about server's multi response.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Options">
            <summary>
            Method to perform Options request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Propfind">
            <summary>
            Method to perform Propfind request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Proppatch">
            <summary>
            Method to perform PropPatch request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Propstat">
            <summary>
            Parses and contains information about Propstat element of server's response.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Put">
            <summary>
            Method to perform Put request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Report">
            <summary>
            Method to perform Report request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Response">
            <summary>
            Parses and contains information about server's response.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.ResponseFactory">
            <summary>
            Factory class for different inheritors of IResponse.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Methods.ResponseFactory.GetResponseAsync(ITHit.WebDAV.Client.IWebResponse,System.Uri)">
            <summary>
            Returns suitable object of IResponse's inheritor: SingleResponse or MultiResponse.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Search">
            <summary>
            Method to perform Search request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.SingleResponse">
            <summary>
            Contains information about server's simple response with no XML content.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.StreamResponse">
            <summary>
            Contains server's response used when GETting resources from the server.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Methods.StreamResponse.GetStreamAsync">
            <summary>
            Gets read stream with content sent by server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.SynchronizationMultiResponse">
            <summary>
            Parses and contains information about server's multi response.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.SynchronizationReport">
            <summary>
            Method to perform Synchronization request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Uncheckout">
            <summary>
            Method to perform Uncheckout request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Unlock">
            <summary>
            Method to perform Unlock request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.Update">
            <summary>
            Method to perform Update request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Methods.VersionControl">
            <summary>
            Method to perform VersionControl request to a server.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.Auxil">
            <summary>
            Class was created to support Environment.NewLine and String.Remove(int) for
            Compact Framework
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.NamespaceDoc">
            <summary>
            This namespace provides classes for accessing WebDAV server items, file structure management, properties management and items locking.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.OptionsInfo">
            <summary>
            Options of an item, described by supported HTTP extensions
            </summary>
            <example>
            <code>
            OptionsInfo options = await root.SupportedFeaturesAsync();
            Features features = options.Features;
            if ((features &amp; Features.Class2) != 0)
                Console.WriteLine("Resourse supports locking.");
            else
                Console.WriteLine("Resourse does not support locking.");
            </code>
            </example>
        </member>
        <member name="F:ITHit.WebDAV.Client.OptionsInfo.Features">
            <summary>
            Classes of WebDAV protocol supported by the item.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.OptionsInfo.MsAuthorViaDav">
            <summary>
            A nonstandard header meaning the server supports WebDAV protocol.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.OptionsInfo.IisServer">
            <summary>
            Returns <c>true</c> if current server is IIS
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.OptionsInfo.#ctor(ITHit.WebDAV.Client.Features,System.Boolean,System.Boolean)">
            <summary>
            Creates new instance of OptionsInfo class
            </summary>
            <param name="features">Features like resumable-upload or Class2.</param>
            <param name="msAuthorViaDav">Server supports WebDAV protocol.</param>
            <param name="iisServer">Is server IIS</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Property">
             <summary>
             WebDAV Property that represents xml properties as well as allows to
             access simple string properties.
             </summary>
             <remarks>This class represents custom property exposed by WebDAV hierarchy items.</remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFile file = await session.GetFileAsync(new Uri("https://server/Library/doc.txt"));
            
             Property[] propsToAddAndUpdate = new Property[3];
             propsToAddAndUpdate[0] = new Property(new PropertyName("Ammount", "CorpNS"), "1200");
             propsToAddAndUpdate[1] = new Property(new PropertyName("ManagerApproved", "Sales"), "Yes");
             propsToAddAndUpdate[2] = new Property(new PropertyName("Branch", "Sales"), "EMEA Region");
            
             PropertyName[] propsToDelete = new PropertyName[2];
             propsToDelete[0] = new PropertyName("InternalName", "Sales");
             propsToDelete[1] = new PropertyName("Counter", "CorpNS");
            
             try
             {
                 await file.UpdatePropertiesAsync(propsToAddAndUpdate, propsToDelete);
             }
             catch(PropertyException ex)
             {
                 Console.WriteLine(ex.Message + " " + ex.Status.Code + " " + ex.Status.Description);
                 // Find which properties failed to add/update/delete
                 foreach (IPropertyMultistatusResponse propInfo in ex.Multistatus.Responses)
                 {
                     Console.WriteLine(propInfo.PropertyName + " " + propInfo.Status.Code + " " + propInfo.Status.Description);
                 }
             }
             </code>
             </example>
        </member>
        <member name="F:ITHit.WebDAV.Client.Property.Name">
             <summary>
             Property Name.
             </summary>
             <remarks>Name of the custom property.</remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFile file = await session.GetFileAsync(new Uri("https://server/Library/doc.txt"));
            
             Property[] properties = await file.GetAllPropertiesAsync();
             foreach(Property prop in properties)
             {
                Console.WriteLine(prop.Name.NamespaceUri + ":" + prop.Name.Name + " " + prop.StringValue);
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.Property.#ctor(ITHit.WebDAV.Client.PropertyName,System.String)">
            <summary>
            Initializes new string valued property.
            </summary>
            <remarks>Initializes new custom string property.</remarks>
            <param name="name">Property name.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.Property.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes new string valued property by given name and namespace.
            </summary>
            <remarks>Initializes new custom string property.</remarks>
            <param name="name">Name of the property.</param>
            <param name="nameSpace">Namespace of the property.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="P:ITHit.WebDAV.Client.Property.StringValue">
             <summary>
             String value of the custom property.
             </summary>
             <remarks>String value of the custom property.</remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFile file = await session.GetFileAsync(new Uri("https://server/Library/doc.txt"));
            
             Property[] properties = await file.GetAllPropertiesAsync();
             foreach(Property prop in properties)
             {
                Console.WriteLine(prop.Name.NamespaceUri + ":" + prop.Name.Name + " " + prop.StringValue);
             }
             </code>
             </example> 
        </member>
        <member name="M:ITHit.WebDAV.Client.Property.ToString">
            <summary>
            Returns string representation of current property.
            </summary>
            <returns>String representation of <see cref="T:ITHit.WebDAV.Client.PropertyName"/>.</returns>
        </member>
        <member name="T:ITHit.WebDAV.Client.PropertyName">
             <summary>
             WebDAV property name.
             </summary>
             <remarks>Represents WebDAV item custom property name.</remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license);
             session.Credentials = new NetworkCredential("User1", "pwd");
             IFile file = await session.GetFileAsync(new Uri("https://server/Library/doc.txt"));
            
             Property[] properties = await file.GetAllPropertiesAsync();
             foreach(Property prop in properties)
             {
                Console.WriteLine(prop.Name.NamespaceUri + ":" + prop.Name.Name + " " + prop.StringValue);
             }
             </code>
             </example> 
        </member>
        <member name="F:ITHit.WebDAV.Client.PropertyName.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.PropertyName.NamespaceUri">
            <summary>
            Namespace of the property.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.PropertyName.#ctor(System.String,System.String)">
            <summary>
            Initializes new instance of <see cref="T:ITHit.WebDAV.Client.PropertyName"/>.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="namespaceUri">Namespace of the property.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.PropertyName.ToString">
            <summary>
            Returns string representation of current property name.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.PropertyName.op_Equality(ITHit.WebDAV.Client.PropertyName,ITHit.WebDAV.Client.PropertyName)">
            <summary>
            The equality operator (==).
            </summary>
            <param name="prop1">First <see cref="T:ITHit.WebDAV.Client.PropertyName"/> instance to compare.</param>
            <param name="prop2">Second <see cref="T:ITHit.WebDAV.Client.PropertyName"/> instance to compare.</param>
            <returns><c>true</c> if the values of its operands are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.PropertyName.op_Inequality(ITHit.WebDAV.Client.PropertyName,ITHit.WebDAV.Client.PropertyName)">
            <summary>
            The inequality operator (!=).
            </summary>
            <param name="prop1">First <see cref="T:ITHit.WebDAV.Client.PropertyName"/> instance to compare.</param>
            <param name="prop2">Second <see cref="T:ITHit.WebDAV.Client.PropertyName"/> instance to compare.</param>
            <returns><c>false</c> if its operands are equal, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.PropertyName.Equals(System.Object)">
            <summary>
            Checks whether objects are equal.
            </summary>
            <param name="obj">An object to compare with the <see cref="T:ITHit.WebDAV.Client.PropertyName"/> object.</param>
            <returns><c>true</c> if the <c>PropertyName</c> and obj are both <c>PropertyName</c> objects, and every component of the <c>PropertyName</c> object matches the corresponding component of obj; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.PropertyName.GetHashCode">
            <summary>
            Returns has code.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.SearchQuery">
             <summary>
             WebDAV search query.
             </summary>
             <example>
             <code>
             SearchQuery oSearchQuery = new SearchQuery("Note%");
            
             //By default WebDAV Ajax Client search by DisplayName property.
             //You can add other properties to this list.
             oSearchQuery.LikeProperties.Add(new PropertyName("creator-displayname", "DAV:"));
             oSearchQuery.LikeProperties.Add(new PropertyName("comment", "DAV:"));
            
             // Disable search by file content
             oSearchQuery.EnableContains = false;
             </code>
             </example> 
        </member>
        <member name="F:ITHit.WebDAV.Client.SearchQuery.Phrase">
            <summary>
            Search phrase.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.SearchQuery.SelectProperties">
            <summary>
            <p>Properties to be returned from server with each item returned in search results.</p> 
            <p>This property can be used to request any additional data required in search results, such as snippet of 
            text around the search phrase, document title, author name, etc.</p>
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.SearchQuery.EnableLike">
            <summary>
            Enables or disables search by properties specified in <code>LikeProperties</code> list. Default is <code>true</code>.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.SearchQuery.LikeProperties">
            <summary>
            List of properties to be used in like conditions. The search phrase will be searched in the properties specilied in this list.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.SearchQuery.EnableContains">
            <summary>
            Enables or disables search inside file content. Default is <code>true</code>.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.SearchQuery.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes new instance of <see cref="T:ITHit.WebDAV.Client.SearchQuery"/>.
            </summary>
            <param name="searchPhrase">Search phrase.</param>
            <param name="enableLike">Enables or disables search by properties specified in <code>LikeProperties</code> list.  Default is <code>true</code>.</param>
            <param name="enableContains">Enables or disables search inside file content.  Default is <code>true</code>.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.Source">
            <summary>
            Media type independent link.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Source.Src">
            <summary>
            Source location.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.Source.Dst">
            <summary>
            Destination location.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.Source.#ctor(System.Uri,System.Uri)">
            <summary>
            Initializes new instance of <see cref="T:ITHit.WebDAV.Client.Source"/>.
            </summary>
            <param name="src">Source location.</param>
            <param name="dst">Destination location.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ActivelockDoesNotContainNode">
            <summary>
              Looks up a localized string similar to Activelock node doesn&apos;t contain {0} node..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.AFolderWasExpected">
            <summary>
              Looks up a localized string similar to A folder was expected..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.AResourceWasExpected">
            <summary>
              Looks up a localized string similar to A resource was expected..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.AVersionHistoryWasExpected">
            <summary>
              Looks up a localized string similar to A version-history was expected..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.AVersionWasExpected">
            <summary>
              Looks up a localized string similar to A version was expected..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.BadHashLengthFor">
            <summary>
              Looks up a localized string similar to Bad hash length for {0}..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ByteOverflowInConstructor">
            <summary>
              Looks up a localized string similar to Byte overflow in constructor..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.CapacityExceeded">
            <summary>
              Looks up a localized string similar to Capacity exceeded..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.CheckinFailed">
            <summary>
              Looks up a localized string similar to Checkin file operation failed..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.CheckoutFailed">
            <summary>
              Looks up a localized string similar to File checkout failed..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.CookieDomainIsNotSet">
            <summary>
              Looks up a localized string similar to Cookie domain not set..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.DeleteOfPropertyIgnored">
            <summary>
              Looks up a localized string similar to Delete of property {0} ignored: properties from DAV: namespace could not be deleted..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ElementCouldNotBeFound">
            <summary>
              Looks up a localized string similar to No element named {0} could be found..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.EvaluationLicenseIsNoLongerValid">
            <summary>
              Looks up a localized string similar to The license issued to &apos;Evaluation&apos; is no longer valid. Please login to your account and download a new license..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionBadRequest">
            <summary>
              Looks up a localized string similar to The request could not be understood by the server..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionConflict">
            <summary>
              Looks up a localized string similar to The request could not be carried because of conflict on server..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionDependencyFailed">
            <summary>
              Looks up a localized string similar to The method could not be performed on the resource because the requested action depended on another action and that action failed..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionDuringGetRequest">
            <summary>
              Looks up a localized string similar to Exception during GET request..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionDuringRequest">
            <summary>
              Looks up a localized string similar to Exception during the request occurred..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionForbidden">
            <summary>
              Looks up a localized string similar to The server refused to fulfill the request..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionHttp">
            <summary>
              Looks up a localized string similar to Exception during the request occured..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionInvalidDepth">
            <summary>
              Looks up a localized string similar to Invalid Depth value..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionLocked">
            <summary>
              Looks up a localized string similar to The item is locked..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionMethodNotAllowed">
            <summary>
              Looks up a localized string similar to The method is not allowed..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionNotFound">
            <summary>
              Looks up a localized string similar to The item doesn&apos;t exist on the server..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionNotImplemented">
            <summary>
              Looks up a localized string similar to Requested functionality is not implemented..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionNotVersionable">
            <summary>
              Looks up a localized string similar to The item can not be put under version control..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionPreconditionFailed">
            <summary>
              Looks up a localized string similar to Precondition failed..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionPropertyConflict">
            <summary>
              Looks up a localized string similar to Getting property caused a conflict..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionPropertyFailed">
            <summary>
              Looks up a localized string similar to Failed to get one or more properties..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionPropertyForbidden">
            <summary>
              Looks up a localized string similar to Not enough rights to obtain one of requested properties..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionPropertyNotFound">
            <summary>
              Looks up a localized string similar to One or more properties not found..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionResumeIncomplete">
            <summary>
              Looks up a localized string similar to More content for the file expected..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionUnauthorized">
            <summary>
              Looks up a localized string similar to Incorrect credentials provided or insufficient permissions to access the requested item..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ExceptionWhileParsingProperties">
            <summary>
              Looks up a localized string similar to Exception while parsing properties..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.FailedCreatingFolder">
            <summary>
              Looks up a localized string similar to Failed creating folder..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.FailedToCopy">
            <summary>
              Looks up a localized string similar to Failed to copy item..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.FailedToDelete">
            <summary>
              Looks up a localized string similar to Failed to delete item..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.FailedToMove">
            <summary>
              Looks up a localized string similar to Failed to move item..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.FailedToParseExpirationDate">
            <summary>
              Looks up a localized string similar to Failed to parse ExpirationDate..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.FailedToParseSupportExpirationDate">
            <summary>
              Looks up a localized string similar to Failed to parse SupportExpirationDate..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.FailedToParseLicenseProperties">
            <summary>
              Looks up a localized string similar to Failed to parse license properties..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.FailedToUpdateProp">
            <summary>
              Looks up a localized string similar to Failed to update or delete one or more properties..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.FromTo">
            <summary>
              Looks up a localized string similar to The From parameter cannot be less than To..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.IncorrectProductLicense">
            <summary>
              Looks up a localized string similar to Incorrect product license..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.InvalidCheckoutCheckinState">
            <summary>
              Looks up a localized string similar to Invalid Checkout/Checkin state to perform the operation..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.InvalidCookie">
            <summary>
              Looks up a localized string similar to Invalid cookie: {0}.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.InvalidLicenseSignature">
            <summary>
              Looks up a localized string similar to Invalid license signature..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.InvalidLicenseXML">
            <summary>
              Looks up a localized string similar to Invalid license XML..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.InvalidPortQuotes">
            <summary>
              Looks up a localized string similar to The &apos;Port&apos;=&apos;{0}&apos; part of the cookie is invalid. Port value must be enclosed by double quotes..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.InvalidPortValue">
            <summary>
              Looks up a localized string similar to The &apos;Port&apos;=&apos;{0}&apos; part of the cookie is invalid. Invalid value: {1}..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.InvalidSyntaxOnLine">
            <summary>
              Looks up a localized string similar to Invalid syntax on line {0}..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.InvalidSyntaxOnLineWithMessage">
            <summary>
              Looks up a localized string similar to Invalid syntax on line {0} - {1}..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid value..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.LicenseExpired">
            <summary>
              Looks up a localized string similar to License expired..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.LicenseNotValidForLib">
            <summary>
              Looks up a localized string similar to The license is obsolete. Your license works with updates issued before {0}. For more information about license upgrade please visit http://www.webdavsystem.com/pricing/upgrade.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.LinkNodeDoesNotContainNode">
            <summary>
              Looks up a localized string similar to Link node doesn&apos;t contain {0} node..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.LocktokenDoesNotContainHrefNode">
            <summary>
              Looks up a localized string similar to Locktoken node doesn&apos;t contain href node..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.MethodFailedWithStatus">
            <summary>
              Looks up a localized string similar to {0} method failed with status {1}: {2}..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.MultiplicationOverflow">
            <summary>
              Looks up a localized string similar to Multiplication overflow..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.MustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to Must be greater than zero..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.NameCanNotBeEmpty">
            <summary>
              Looks up a localized string similar to Name cannot be empty..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.NameContainsInvalidCharacters">
            <summary>
              Looks up a localized string similar to Name contains invalid characters..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.NegativeUnderflowInConstructor">
            <summary>
              Looks up a localized string similar to Negative underflow in constructor..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.NoLockInfoElementsFound">
            <summary>
              Looks up a localized string similar to Unable to parse response: no LockInfo elements found in response..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.NoPropertiesToChange">
            <summary>
              Looks up a localized string similar to Calling UpdateProperties ignored: no properties to update/add/delete..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.NotToken">
            <summary>
              Looks up a localized string similar to The supplied string is not a valid HTTP token..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.NotUnderVersionControl">
            <summary>
              Looks up a localized string similar to The item is not under version control..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.OutOfRange">
            <summary>
              Looks up a localized string similar to The given parameters are out of range..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.OverflowInNegation">
            <summary>
              Looks up a localized string similar to Overflow in negation..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.PositiveExponentsOnly">
            <summary>
              Looks up a localized string similar to Positive exponents only..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.PositiveOverflowInConstructor">
            <summary>
              Looks up a localized string similar to Positive overflow in constructor..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.PropertyValueIsNotSupported">
            <summary>
              Looks up a localized string similar to Property value is not supported..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.PropertyWasNotFound">
            <summary>
              Looks up a localized string similar to Property was not found..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.PublicKey">
            <summary>
              Looks up a localized string similar to Public key..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.PutUnderVersionControlFailed">
            <summary>
              Looks up a localized string similar to Put under version control failed..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.RangeTooSmall">
            <summary>
              Looks up a localized string similar to The From or To parameter cannot be less than 0..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.RangeType">
            <summary>
              Looks up a localized string similar to A different range specifier has already been added to this request..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ResponseDoesntHaveRequiredItem">
            <summary>
              Looks up a localized string similar to The response doesn&apos;t have required item..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ServerReturned">
            <summary>
              Looks up a localized string similar to Server returned:.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.SignaturesDoNotMatch">
            <summary>
              Looks up a localized string similar to Signatures are not identical..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ThePropertyCanNotBeRequested">
            <summary>
              Looks up a localized string similar to The property can not be requested this way..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.TheResourceNoLongerExists">
            <summary>
              Looks up a localized string similar to The resource no longer exists..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.UncheckoutFailed">
            <summary>
              Looks up a localized string similar to Uncheckout file operation failed..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.UpdateOfPropertyIgnored">
            <summary>
              Looks up a localized string similar to Update of property {0} ignored: properties from DAV: namespace could not be updated/added..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.UpdateToVersionFailed">
            <summary>
              Looks up a localized string similar to Update to version failed..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.UserAgent">
            <summary>
              Looks up a localized string similar to IT Hit WebDAV Client .Net v.
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ValueHasBeenSerialized">
            <summary>
              Looks up a localized string similar to Value has been serialized already..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.ValueIsLargerThanMaxCookieSize">
            <summary>
              Looks up a localized string similar to Value is larger than MaxCookieSize..
            </summary>
        </member>
        <member name="P:ITHit.WebDAV.Client.SR.XmlNodeNotFound">
            <summary>
              Looks up a localized string similar to Node not found: &quot;{0}&quot;..
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.WebDavErrorEventHandler">
            <summary>
            WebDAV error event delegate.
            </summary>
            <param name="sender"><see cref="T:ITHit.WebDAV.Client.ISession"/> instance sending this event.</param>
            <param name="e">Event data that contains a WebDAV error information.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.WebDavMessageEventHandler">
            <summary>
            WebDAV message event delegate.
            </summary>
            <param name="sender"><see cref="T:ITHit.WebDAV.Client.ISession"/> instance sending this event.</param>
            <param name="e">Event data that contains a message.</param>
        </member>
        <member name="T:ITHit.WebDAV.Client.WebDavErrorEventArgs">
            <summary>
            WebDAV error event argument. Contains information about an error.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.WebDavErrorEventArgs.Exception">
            <summary>
            Exception that will be thrown after this event is fired if <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventArgs.Result"/> 
            is set to <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventResult.Fail"/>.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.WebDavErrorEventArgs.Result">
            <summary>
            Set this property to <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventResult.Repeat"/> in your event handler to retry this request.
            Set this property to <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventResult.ContinueProcessing"/> 
            to continue processing without error throw.
            Set this property to <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventResult.Fail"/> to throw exception. 
            Default is <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventResult.Fail"/>.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.WebDavMessageEventArgs">
            <summary>
            Event message argument. Contains information to be logged.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.WebDavMessageEventArgs.Message">
            <summary>
            Message to be logged.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.WebDavMessageEventArgs.LogLevel">
            <summary>
            Type of information being logged.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.WebDavErrorEventResult">
            <summary>
            Informs the library how to further process the error.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.WebDavErrorEventResult.Fail">
            <summary>
            An exception will be thrown.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.WebDavErrorEventResult.ContinueProcessing">
            <summary>
            Continue processing without error throw.
            </summary>
        </member>
        <member name="F:ITHit.WebDAV.Client.WebDavErrorEventResult.Repeat">
            <summary>
            Repeat last request.
            </summary>
        </member>
        <member name="T:ITHit.WebDAV.Client.WebDavSession">
             <summary>
             Session for accessing WebDAV servers.
             </summary>
             <remarks>This class is intended to be instantiated once per application, rather than per-use.</remarks>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license, new HttpClientHandler() { Credentials = new NetworkCredential("User1", "pwd")});
            
             IFolder folder = null;
             try
             {
                 folder = await session.GetFolderAsync(new Uri("https://server:8080/Products"));
             }
             catch(UnauthorizedException)
             {
                 Console.WriteLine("Incorrect user name or password.");
             }
             catch(NotFoundException)
             {
                 Console.WriteLine("Folder not found.");
             }
            
             if(folder!=null)
             {
                 Console.WriteLine(folder.LastModified.ToString());
             }
             </code>
             </example>
        </member>
        <member name="F:ITHit.WebDAV.Client.WebDavSession.Client">
            <summary>
            HTTP client used to send requests.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.#ctor(System.String,System.Net.Http.HttpClientHandler)">
            <summary>
            Constructor for WebDAV session.
            </summary>
            <param name="license">License string.</param>
            <param name="handler"><see cref="T:System.Net.Http.HttpClientHandler" /> used to initialize the <see cref="T:System.Net.Http.HttpClient" /></param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.InvalidLicenseException">The license is invalid.</exception>
            <example>
			In the following example a file is uploaded to a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");
IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;
FileInfo file = new FileInfo("C:\\Products.exe");

IFile davFile = (await folder.CreateFileAsync(file.Name)).WebDavResponse;
await session.UploadAsync(davFile.Href, async (outputStream) =>
{
    int bufSize = 1048576; // 1Mb
    byte[] buffer = new byte[bufSize];
    int bytesRead = 0;

    using (var fileStream = file.OpenRead())
    {
        while ((bytesRead = await fileStream.ReadAsync(buffer, 0, bufSize)) > 0)
            await outputStream.WriteAsync(buffer, 0, bytesRead);
    }
}, null, file.Length, 0, -1, null, null);
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.#ctor(System.String,System.Net.Http.HttpMessageHandler)">
            <summary>
            Constructor for WebDAV session.
            </summary>
            <param name="license">License string.</param>
            <param name="handler"><see cref="T:System.Net.Http.HttpMessageHandler" /> used to initialize the <see cref="T:System.Net.Http.HttpClient" /></param>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.InvalidLicenseException">The license is invalid.</exception>
            <example>
			In the following example a file is uploaded to a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");
IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;
FileInfo file = new FileInfo("C:\\Products.exe");

IFile davFile = (await folder.CreateFileAsync(file.Name)).WebDavResponse;
await session.UploadAsync(davFile.Href, async (outputStream) =>
{
    int bufSize = 1048576; // 1Mb
    byte[] buffer = new byte[bufSize];
    int bytesRead = 0;

    using (var fileStream = file.OpenRead())
    {
        while ((bytesRead = await fileStream.ReadAsync(buffer, 0, bufSize)) > 0)
            await outputStream.WriteAsync(buffer, 0, bytesRead);
    }
}, null, file.Length, 0, -1, null, null);
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.#ctor(System.Net.Http.HttpClientHandler)">
            <exclude/>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.GetFileAsync(System.String,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Returns <see cref="T:ITHit.WebDAV.Client.IFile" /> corresponding to <paramref name="path" />.
            </summary>
            <param name="path">Path to the file.</param>
            <param name="propNames">Properties that will be retrieved for the item returned by this method.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>File corresponding to requested path.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occured.</exception>
            <example>
			In the following example a file is downloaded from a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile davFile = (await session.GetFileAsync("https://server:8080/Products/image.gif")).WebDavResponse;
using (Stream webStream = await davFile.GetReadStreamAsync())
{
    int bufSize = 1048576; // 1Mb
    byte[] buffer = new byte[bufSize];
    int bytesRead = 0;
    using (FileStream fileStream = File.OpenWrite(davFile.DisplayName))
    {
        while ((bytesRead = await webStream.ReadAsync(buffer, 0, bufSize)) > 0)
            await fileStream.WriteAsync(buffer, 0, bytesRead);
    }
}
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.GetFileAsync(System.Uri,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Returns <see cref="T:ITHit.WebDAV.Client.IFile" /> corresponding to <paramref name="path" />.
            </summary>
            <param name="path">Path to the file.</param>
            <param name="propNames">Properties that will be retrieved for the item returned by this method.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>File corresponding to requested path.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <example>
			In the following example a file is downloaded from a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile davFile = (await session.GetFileAsync("https://server:8080/Products/image.gif")).WebDavResponse;
using (Stream webStream = await davFile.GetReadStreamAsync())
{
    int bufSize = 1048576; // 1Mb
    byte[] buffer = new byte[bufSize];
    int bytesRead = 0;
    using (FileStream fileStream = File.OpenWrite(davFile.DisplayName))
    {
        while ((bytesRead = await webStream.ReadAsync(buffer, 0, bufSize)) > 0)
            await fileStream.WriteAsync(buffer, 0, bytesRead);
    }
}
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.GetFolderAsync(System.String,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Returns <see cref="T:ITHit.WebDAV.Client.IFolder"/> corresponding to <paramref name="path"/>.
             </summary>
             <param name="path">Path to the folder.</param>
             <param name="propNames">Properties that will be retrieved for the item returned by this method.</param>
             <param name="headers">Request headers.</param>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <returns>Folder corresponding to requested path.</returns>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested folder doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license, new HttpClientHandler() { Credentials = new NetworkCredential("User1", "pwd")});
            
             IFolder folder = null;
             try
             {
                 folder = (await session.GetFolderAsync("https://server/Products/")).WebDavResponse;
             }
             catch(UnauthorizedException)
             {
                 Console.WriteLine("Incorrect user name or password.");
             }
             catch(NotFoundException)
             {
                 Console.WriteLine("Folder not found.");
             }
            
             if (folder != null)
             {
                 Console.WriteLine(folder.LastModified.ToString());
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.GetFolderAsync(System.Uri,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Returns <see cref="T:ITHit.WebDAV.Client.IFolder"/> corresponding to <paramref name="path"/>.
             </summary>
             <param name="path">Path to the folder.</param>
             <param name="propNames">Properties that will be retrieved for the item returned by this method.</param>
             <param name="headers">Request headers.</param>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <returns>Folder corresponding to requested path.</returns>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested folder doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license, new HttpClientHandler() { Credentials = new NetworkCredential("User1", "pwd") });
            
             IFolder folder = null;
             try
             {
                 folder = (await session.GetFolderAsync(new Uri("https://server/Products/"))).WebDavResponse;
             }
             catch(UnauthorizedException)
             {
                 Console.WriteLine("Incorrect user name or password.");
             }
             catch(NotFoundException)
             {
                 Console.WriteLine("Folder not found.");
             }
            
             if (folder != null)
             {
                 Console.WriteLine(folder.LastModified.ToString());
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.GetItemAsync(System.Uri,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Returns <see cref="T:ITHit.WebDAV.Client.IHierarchyItem"/> corresponding to <paramref name="path"/>.
             </summary>
             <param name="path">Path to the item.</param>
             <param name="propNames">Properties that will be retrieved for the item returned by this method.</param>
             <param name="headers">Request headers.</param>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <returns>Item corresponding to requested path.</returns>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested folder doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license, new HttpClientHandler() { Credentials = new NetworkCredential("User1", "pwd") });
            
             IHierarchyItem item = null;
             try
             {
                 item = (await session.GetItemAsync(new Uri("https://server/Products/"))).WebDavResponse;
             }
             catch(UnauthorizedException)
             {
                 Console.WriteLine("Incorrect user name or password.");
             }
             catch(NotFoundException)
             {
                 Console.WriteLine("Item was not found.");
             }
            
             if (item != null)
             {
                 Console.WriteLine(item.DisplayName);
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.GetItemAsync(System.String,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
             <summary>
             Returns <see cref="T:ITHit.WebDAV.Client.IHierarchyItem"/> corresponding to <paramref name="path"/>.
             </summary>
             <param name="path">Path to the item.</param>
             <param name="propNames">Properties that will be retrieved for the item returned by this method.</param>
             <param name="headers">Request headers.</param>
             <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
             <returns>Item corresponding to requested path.</returns>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested folder doesn't exist on the server.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
             <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license, new HttpClientHandler() { Credentials = new NetworkCredential("User1", "pwd") });
            
             IHierarchyItem item = null;
             try
             {
                 item = (await session.GetItemAsync("https://server/Products/new.zip")).WebDavResponse;
             }
             catch(UnauthorizedException)
             {
                 Console.WriteLine("Incorrect user name or password.");
             }
             catch(NotFoundException)
             {
                 Console.WriteLine("Item was not found.");
             }
            
             if (item != null)
             {
                 Console.WriteLine(item.LastModified.ToString());
             }
             </code>
             </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.GetVersionAsync(System.Uri,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Returns <see cref="T:ITHit.WebDAV.Client.IVersion" /> corresponding to <paramref name="path" />.
            </summary>
            <param name="path">Path to the version.</param>
            <param name="propNames">Properties that will be retrieved for the item returned by this method.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Version corresponding to requested path.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested folder doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <example>
			The following example demonstrates how to restore specific version of the item.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync("https://server/sales.docx")).WebDavResponse;
LockInfo lockInfo = (await file.LockAsync(LockScope.Exclusive, false, "John Walter", TimeSpan.MaxValue)).WebDavResponse;
IVersion version = (await session.OpenVersionAsync(new Uri("https://server/sales.docx?version=2"))).WebDavResponse;
await file.UpdateToVersionAsync(version, lockInfo.LockToken.LockToken);
await file.UnlockAsync(lockInfo.LockToken.LockToken);
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.GetVersionAsync(System.String,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Returns <see cref="T:ITHit.WebDAV.Client.IVersion" /> corresponding to <paramref name="path" />.
            </summary>
            <param name="path">Path to the version.</param>
            <param name="propNames">Properties that will be retrieved for the item returned by this method.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Version corresponding to requested path.</returns>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.UnauthorizedException">Incorrect credentials provided or insufficient permissions to access the requested item.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">The requested folder doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.ForbiddenException">The server refused to fulfill the request.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <example>
			The following example demonstrates how to restore specific version of the item.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");

IFile file = (await session.GetFileAsync("https://server/sales.docx")).WebDavResponse;
LockInfo lockInfo = (await file.LockAsync(LockScope.Exclusive, false, "John Walter", TimeSpan.MaxValue)).WebDavResponse;
IVersion version = (await session.OpenVersionAsync(new Uri("https://server/sales.docx?version=2"))).WebDavResponse;
await file.UpdateToVersionAsync(version, lockInfo.LockToken.LockToken);
await file.UnlockAsync(lockInfo.LockToken.LockToken);
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.GetChildrenAsync(System.Uri,System.Boolean,ITHit.WebDAV.Client.PropertyName[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Enumerates children of the specified folder.
            </summary>
            <param name="folder">Folder to enumerate children.</param>
            <param name="recursively">Indicates if all subtree of children should be returned.</param>
            <param name="names">Properties that will be requested form server for each item returned by this method.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Array of child folders and files.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.GetChangesAsync(System.Uri,ITHit.WebDAV.Client.PropertyName[],System.String,System.Boolean,System.Nullable{System.Int64},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Returns a list of changes that correspond to a synchronization request. 
            </summary>
            <param name="folder">Folder to enumerate children.</param>
            <param name="propNames">Array of properties to retrieve with the children. They will be queried by the engine later.</param>
            <param name="syncToken">The synchronization token provided by the server and  returned by the client.</param>
            <param name="deep">Indicates the "scope" of the synchronization report request, false - immediate children and true - all children at any depth.</param>
            <param name="limit">Limits the number of member URLs in a response.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.CreateFolderAsync(System.Uri,ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a new folder.
            </summary>
            <param name="newFolder">New folder URI.</param>
            <param name="lockTokens">Parent folder lock tokens.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.ExistsAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Checks whether specified path exists.
            </summary>
            <param name="path">Path to item</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>True, if specified item exists; false, otherwise.</returns>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            bool isItemExists = (await session.ExistsAsync("https://server:8080/Library/")).WebDavResponse;
            if(isItemExists)
                Console.WriteLine("Item exists");
            else
                Console.WriteLine("Item not found");
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.ExistsAsync(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Checks whether specified uri exists.
            </summary>
            <param name="uri">Uri to item</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>True, if specified item exists; false, otherwise.</returns>
            <example>
            <code>
            string license = "&lt;?xml version='1.0' encoding='utf...
            WebDavSession session = new WebDavSession(license);
            session.Credentials = new NetworkCredential("User1", "pwd");
            bool isItemExists = (await session.ExistsAsync(new Uri("https://server:8080/Library/"))).WebDavResponse;
            if(isItemExists)
                Console.WriteLine("Item exists");
            else
                Console.WriteLine("Item not found");
            </code>
            </example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.DownloadAsync(System.Uri,System.Int64,System.Int64,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Loads a file or a part of the content of the file from WebDAV server.
            </summary>  
            <param name="path">File path URI.</param>
            <param name="startIndex">Start position to retrieve <paramref name="count"/> number of bytes from.</param>
            <param name="count">Number of bytes to retrieve.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <remarks>
            If server supports <c>If-Range</c> header and last modification time do not match
            (the file content was modified) the library will throw <see cref="T:ITHit.WebDAV.Client.Exceptions.FileContentModifiedException"/> exception.
            </remarks>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This resource doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.FileContentModifiedException">Content was modified on server.</exception>
            <returns>WebDAV response to read resource content.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.UploadAsync(System.Uri,System.Func{System.IO.Stream,System.Threading.Tasks.Task},System.String,System.Int64,System.Int64,System.Int64,ITHit.WebDAV.Client.LockUriTokenPair[],System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Creates or updates a file.
            </summary>
            <param name="path">File URI.</param>
            <param name="onStreamAvailable">Function to write to file.</param>
            <param name="contentType">Media type of the file.</param>
            <param name="totalContentLength">Total file content lenth.</param>
            <param name="segmentStartIndex">Index in file content to start writing from.</param>
            <param name="segmetSize">Length of content segment to be written.</param>
            <param name="lockTokens">Lock tokens.</param>
            <param name="eTag">Server file ETag. Attached to the request to make sure the file changes on the server are not overwritten.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>A new ETag for uploaded file.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.MoveToAsync(System.Uri,System.Uri,System.Boolean,ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Moves an item to a new location.
            </summary>
            <param name="source">URI of the item to be moved.</param>
            <param name="destination">Target URI.</param>
            <param name="overwrite">Whether existing destination item shall be overwritten.</param>
            <param name="lockTokens">Lock tokens for resources to be moved, for destination folder or resources to be overwritten that are locked.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.DeleteAsync(System.Uri,ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Deletes an item.
            </summary>
            <param name="item">URI of the item to be deleted.</param>
            <param name="lockTokens">Item lock token.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>.</returns>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.LockAsync(System.Uri,ITHit.WebDAV.Client.LockScope,System.Boolean,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Locks an item.
            </summary>
            <param name="item">URI of the item to be locked.</param>
            <param name="lockScope">Scope of the lock.</param>
            <param name="deep">Whether to lock entire subtree.</param>
            <param name="owner">Owner of the lock.</param>
            <param name="timeout">TimeOut after which lock expires.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Instance of <see cref="T:ITHit.WebDAV.Client.LockInfo"/> with information about the created lock.</returns>
            <remarks>Server can set lock with different timeout than the one that was requested.</remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.UnlockAsync(System.Uri,ITHit.WebDAV.Client.LockUriTokenPair[],System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Unlocks an item.
            </summary>
            <param name="item">URI of the item to be unlocked.</param>
            <param name="lockTokens">Lock-tokens to be used for unlocking.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.RefreshLockAsync(System.Uri,System.String,System.Nullable{System.TimeSpan},System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Prolongs the lock.
            </summary>
            <param name="item">URI of the item to be lock prolonged.</param>
            <param name="lockToken">Identifies lock to be prolonged.</param>
            <param name="timeout">New timeout to set. Set to TimeSpan.MaxValue for infinity.</param>
            <param name="headers">Request headers.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Instance of <see cref="T:ITHit.WebDAV.Client.LockInfo"/> with information about refreshed lock.</returns>
            <remarks>Server can set lock with different timeout than the one was asked.</remarks>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.PreconditionFailedException">
            The included lock token was not enforceable on this resource
            or the server could not satisfy the request in the lockinfo XML element.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.LockedException">
            The resource is locked, so the method has been rejected.
            </exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.NotFoundException">This item doesn't exist on the server.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavHttpException">Server returned unknown error.</exception>
            <exception cref="T:ITHit.WebDAV.Client.Exceptions.WebDavException">Unexpected error occurred.</exception>
        </member>
        <member name="E:ITHit.WebDAV.Client.WebDavSession.WebDavError">
            <summary>
            Event fired when any error occurs during the request. 
            Fired before the library throws the exception.
            </summary>
            <remarks>
            Inside this event you can capture the 302 login redirect and show a 
            web browser dialog to log-in and read cookies. Than you can repeat the request by setting 
            <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventArgs.Result"/> property to <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventResult.Repeat"/> 
            inside your handler for the request to be repeated.
            </remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.OnWebDavError(ITHit.WebDAV.Client.WebDavErrorEventArgs)">
            <summary>
            Rises the <see cref="E:ITHit.WebDAV.Client.WebDavSession.WebDavError"/> event.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.LogWebDavError(ITHit.WebDAV.Client.Exceptions.WebDavException)">
            <summary>
            Rises the <see cref="E:ITHit.WebDAV.Client.WebDavSession.WebDavError"/> event.
            </summary>
            <param name="ex">Exception to be passed in <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventArgs.Exception"/> property to <see cref="E:ITHit.WebDAV.Client.WebDavSession.WebDavError"/> event handler.</param>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.LogWebDavError(ITHit.WebDAV.Client.WebDavErrorEventArgs)">
            <summary>
            Rises the <see cref="E:ITHit.WebDAV.Client.WebDavSession.WebDavError"/> event.
            </summary>
            <param name="errArgs">Exception arguments in <see cref="T:ITHit.WebDAV.Client.WebDavErrorEventArgs"/> container.</param>
        </member>
        <member name="E:ITHit.WebDAV.Client.WebDavSession.WebDavMessage">
            <summary>
            Event fired when a new log data available during the request. 
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.OnWebDavMessage(ITHit.WebDAV.Client.WebDavMessageEventArgs)">
            <summary>
            Rises the <see cref="E:ITHit.WebDAV.Client.WebDavSession.WebDavMessage"/> event.
            </summary>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.LogWebDavMessage(System.String,ITHit.WebDAV.Client.Logger.LogLevel)">
            <summary>
            Rises the <see cref="E:ITHit.WebDAV.Client.WebDavSession.WebDavMessage"/> event.
            </summary>
            <param name="message">Message to be passed in <see cref="E:ITHit.WebDAV.Client.WebDavSession.WebDavMessage"/> property to <see cref="E:ITHit.WebDAV.Client.WebDavSession.WebDavMessage"/> event handler.</param>
            <param name="logLevel">Type of information being logged.</param>
        </member>
        <member name="P:ITHit.WebDAV.Client.WebDavSession.ContentEncoding">
            <summary>
            Gets or sets the HTTP character set of the output stream.
            </summary>
            <value>A <c>Encoding</c> object that contains information about the character set of the response. Default is UTF-8.</value>
        </member>
        <member name="P:ITHit.WebDAV.Client.WebDavSession.Credentials">
             <summary>
             Sets and gets credentials for connection.
             </summary>
             <example>
             <code>
             string license = "&lt;?xml version='1.0' encoding='utf...
             WebDavSession session = new WebDavSession(license, new HttpClientHandler() { Credentials = new NetworkCredential("User1", "pwd") });
            
             IFolder folder = null;
             try
             {
                 folder = (await session.GetFolderAsync(new Uri("https://server/Products"))).WebDavResponse;
             }
             catch(UnauthorizedException)
             {
                 Console.WriteLine("Incorrect user name or password.");
             }
             catch(NotFoundException)
             {
                 Console.WriteLine("Folder not found.");
             }
            
             if(folder!=null)
             {
                 Console.WriteLine(folder.LastModified.ToString());
             }
             </code>
             </example>
             
        </member>
        <member name="P:ITHit.WebDAV.Client.WebDavSession.CustomHeaders">
            <summary>
            Custom user headers which will be added to all requests.
            </summary>
            <remarks>Use this property to add and remove custom headers from the collection.</remarks>
        </member>
        <member name="P:ITHit.WebDAV.Client.WebDavSession.CookieContainer">
            <summary>
            Cookies which will be added to all requests.
            </summary>
            <remarks>Use this property to add and remove cookies from the collection.</remarks>
        </member>
        <member name="P:ITHit.WebDAV.Client.WebDavSession.Expect100Continue">
            <summary>
            Determines if header "Expect: 100-continue" will be sent with all request. Default value is <c>true</c>
            </summary>
            <remarks>Use this property to turn Expect header off</remarks>
        </member>
        <member name="P:ITHit.WebDAV.Client.WebDavSession.ClientCertificates">
            <summary>
            Gets collection of certificates which will be attached to every request.
            </summary>
            <remarks>Use this property to add and remove certificates required by server.</remarks>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.CreateRequest(System.Uri,ITHit.WebDAV.Client.LockUriTokenPair[],System.String[])">
            <exclude/>
        </member>
        <member name="P:ITHit.WebDAV.Client.WebDavSession.IIS6SSLSupport">
            <summary>
            Fixes urls for IIS 6 build-in WebDAV SSL connections.
            </summary>
            <remarks>IIS 6 build-in WebDAV returns http instead of https in PROPFIND responses if SSL is used. Set this property to true to automatically fix incorrect urls.</remarks>
        </member>
        <member name="P:ITHit.WebDAV.Client.WebDavSession.TimeOut">
            <summary>
            Sets and gets time-out in milliseconds.
            </summary>
            <value>The number of milliseconds to wait before the request times out. The default is 100,000 milliseconds (100 seconds).</value>
            <example>
			The following example demonstrates how to upload a file from local file system to a WebDAV server.
			<code>
				<![CDATA[
string license = "<?xml version='1.0' encoding='utf...
WebDavSessionAsync session = new WebDavSessionAsync(license);
session.Credentials = new NetworkCredential("User1", "pwd");
IFolder folder = (await session.GetFolderAsync(new Uri("https://server:8080/Sales"))).WebDavResponse;

IFile file = (await folder.CreateFileAsync("products.xlsx")).WebDavResponse;
file.AllowWriteStreamBuffering = false;
file.TimeOut = 36000000; // 10 hours
await file.UploadAsync("C:\\products.xlsx");
				]]>
			</code>
		</example>
        </member>
        <member name="M:ITHit.WebDAV.Client.WebDavSession.ExecRepeatAsync(ITHit.WebDAV.Client.WebDavSession,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes a provided method, captures <see cref="T:System.Net.WebException"/>, fires <see cref="E:ITHit.WebDAV.Client.WebDavSession.WebDavError"/> event, 
            repeats execution if user have set <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventArgs.Result"/> to <see cref="F:ITHit.WebDAV.Client.WebDavErrorEventResult.Repeat"/>
            inside the error event handler.
            </summary>
            <param name="session">WebDAV session object.</param>
            <param name="func">Function to execute.</param>
            <returns></returns>
        </member>
    </members>
</doc>
